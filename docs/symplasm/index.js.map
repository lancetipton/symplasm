{
  "version": 3,
  "sources": ["../../src/index.js", "../../src/compat.js", "../../src/lexer.js", "../../src/helpers.js", "../../src/parser.js", "../../src/prop_map.js", "../../src/stringify.js", "../../src/format.js", "../../src/tags.js", "../../src/symplasm.ts"],
  "sourcesContent": ["export * from './symplasm'", "/*\n  We don't want to include babel-polyfill in our project.\n    - Library authors should be using babel-runtime for non-global polyfilling\n    - Adding babel-polyfill/-runtime increases bundle size significantly\n\n  We will include our polyfill instance methods as regular functions.\n*/\n\nexport function startsWith (str, searchString, position) {\n  return str.substr(position || 0, searchString.length) === searchString\n}\n\nexport function endsWith (str, searchString, position) {\n  const index = (position || str.length) - searchString.length\n  const lastIndex = str.lastIndexOf(searchString, index)\n  return lastIndex !== -1 && lastIndex === index\n}\n\nexport function stringIncludes (str, searchString, position) {\n  return str.indexOf(searchString, position || 0) !== -1\n}\n\nexport function isRealNaN (x) {\n  return typeof x === 'number' && isNaN(x)\n}\n\nexport function arrayIncludes (array, searchElement, position) {\n  const len = array.length\n  if (len === 0) return false\n\n  const lookupIndex = position | 0\n  const isNaNElement = isRealNaN(searchElement)\n  let searchIndex = lookupIndex >= 0 ? lookupIndex : len + lookupIndex\n  while (searchIndex < len) {\n    const element = array[searchIndex++]\n    if (element === searchElement) return true\n    if (isNaNElement && isRealNaN(element)) return true\n  }\n\n  return false\n}\n", "import {\n  startsWith,\n  endsWith,\n  stringIncludes,\n  arrayIncludes\n} from './compat'\n\nexport function feedPosition (position, str, len) {\n  const start = position.index\n  const end = position.index = start + len\n  for (let i = start; i < end; i++) {\n    const char = str.charAt(i)\n    if (char === '\\n') {\n      position.line++\n      position.column = 0\n    } else {\n      position.column++\n    }\n  }\n}\n\nexport function jumpPosition (position, str, end) {\n  const len = end - position.index\n  return feedPosition(position, str, len)\n}\n\nexport function makeInitialPosition () {\n  return {\n    index: 0,\n    column: 0,\n    line: 0\n  }\n}\n\nexport function copyPosition (position) {\n  return {\n    index: position.index,\n    line: position.line,\n    column: position.column\n  }\n}\n\nexport default function lexer (str, options) {\n  const state = {\n    str,\n    options,\n    position: makeInitialPosition(),\n    tokens: []\n  }\n  lex(state)\n  return state.tokens\n}\n\nexport function lex (state) {\n  const {str, options: {childlessTags}} = state\n  const len = str.length\n  while (state.position.index < len) {\n    const start = state.position.index\n    lexText(state)\n    if (state.position.index === start) {\n      const isComment = startsWith(str, '!--', start + 1)\n      if (isComment) {\n        lexComment(state)\n      } else {\n        const tagName = lexTag(state)\n        const safeTag = tagName.toLowerCase()\n        if (arrayIncludes(childlessTags, safeTag)) {\n          lexSkipTag(tagName, state)\n        }\n      }\n    }\n  }\n}\n\nconst alphanumeric = /[A-Za-z0-9]/\nexport function findTextEnd (str, index) {\n  while (true) {\n    const textEnd = str.indexOf('<', index)\n    if (textEnd === -1) {\n      return textEnd\n    }\n    const char = str.charAt(textEnd + 1)\n    if (char === '/' || char === '!' || alphanumeric.test(char)) {\n      return textEnd\n    }\n    index = textEnd + 1\n  }\n}\n\nexport function lexText (state) {\n  const type = 'text'\n  const {str, position} = state\n  let textEnd = findTextEnd(str, position.index)\n  if (textEnd === position.index) return\n  if (textEnd === -1) {\n    textEnd = str.length\n  }\n\n  const start = copyPosition(position)\n  const content = str.slice(position.index, textEnd)\n  jumpPosition(position, str, textEnd)\n  const end = copyPosition(position)\n  state.tokens.push({type, content, position: {start, end}})\n}\n\nexport function lexComment (state) {\n  const {str, position} = state\n  const start = copyPosition(position)\n  feedPosition(position, str, 4) // \"<!--\".length\n  let contentEnd = str.indexOf('-->', position.index)\n  let commentEnd = contentEnd + 3 // \"-->\".length\n  if (contentEnd === -1) {\n    contentEnd = commentEnd = str.length\n  }\n\n  const content = str.slice(position.index, contentEnd)\n  jumpPosition(position, str, commentEnd)\n  state.tokens.push({\n    type: 'comment',\n    content,\n    position: {\n      start,\n      end: copyPosition(position)\n    }\n  })\n}\n\nexport function lexTag (state) {\n  const {str, position} = state\n  {\n    const secondChar = str.charAt(position.index + 1)\n    const close = secondChar === '/'\n    const start = copyPosition(position)\n    feedPosition(position, str, close ? 2 : 1)\n    state.tokens.push({type: 'tag-start', close, position: {start}})\n  }\n  const tagName = lexTagName(state)\n  lexTagAttributes(state)\n  {\n    const firstChar = str.charAt(position.index)\n    const close = firstChar === '/'\n    feedPosition(position, str, close ? 2 : 1)\n    const end = copyPosition(position)\n    state.tokens.push({type: 'tag-end', close, position: {end}})\n  }\n  return tagName\n}\n\nconst whitespace = /\\s/\nexport function isWhitespaceChar (char) {\n  return whitespace.test(char)\n}\n\nexport function lexTagName (state) {\n  const {str, position} = state\n  const len = str.length\n  let start = position.index\n  while (start < len) {\n    const char = str.charAt(start)\n    const isTagChar = !(isWhitespaceChar(char) || char === '/' || char === '>')\n    if (isTagChar) break\n    start++\n  }\n\n  let end = start + 1\n  while (end < len) {\n    const char = str.charAt(end)\n    const isTagChar = !(isWhitespaceChar(char) || char === '/' || char === '>')\n    if (!isTagChar) break\n    end++\n  }\n\n  jumpPosition(position, str, end)\n  const tagName = str.slice(start, end)\n  state.tokens.push({\n    type: 'tag',\n    content: tagName\n  })\n  return tagName\n}\n\nexport function lexTagAttributes (state) {\n  const {str, position, tokens} = state\n  let cursor = position.index\n  let quote = null\n  let wordBegin = cursor\n  const words = []\n  const len = str.length\n  while (cursor < len) {\n    const char = str.charAt(cursor)\n    if (quote) {\n      const isQuoteEnd = char === quote\n      if (isQuoteEnd) {\n        quote = null\n      }\n      cursor++\n      continue\n    }\n\n    const isTagEnd = char === '/' || char === '>'\n    if (isTagEnd) {\n      if (cursor !== wordBegin) {\n        words.push(str.slice(wordBegin, cursor))\n      }\n      break\n    }\n\n    const isWordEnd = isWhitespaceChar(char)\n    if (isWordEnd) {\n      if (cursor !== wordBegin) {\n        words.push(str.slice(wordBegin, cursor))\n      }\n      wordBegin = cursor + 1\n      cursor++\n      continue\n    }\n\n    const isQuoteStart = char === '\\'' || char === '\"'\n    if (isQuoteStart) {\n      quote = char\n      cursor++\n      continue\n    }\n\n    cursor++\n  }\n  jumpPosition(position, str, cursor)\n\n  const wLen = words.length\n  const type = 'attribute'\n  for (let i = 0; i < wLen; i++) {\n    const word = words[i]\n    const isNotPair = word.indexOf('=') === -1\n    if (isNotPair) {\n      const secondWord = words[i + 1]\n      if (secondWord && startsWith(secondWord, '=')) {\n        if (secondWord.length > 1) {\n          const newWord = word + secondWord\n          tokens.push({type, content: newWord})\n          i += 1\n          continue\n        }\n        const thirdWord = words[i + 2]\n        i += 1\n        if (thirdWord) {\n          const newWord = word + '=' + thirdWord\n          tokens.push({type, content: newWord})\n          i += 1\n          continue\n        }\n      }\n    }\n    if (endsWith(word, '=')) {\n      const secondWord = words[i + 1]\n      if (secondWord && !stringIncludes(secondWord, '=')) {\n        const newWord = word + secondWord\n        tokens.push({type, content: newWord})\n        i += 1\n        continue\n      }\n\n      const newWord = word.slice(0, -1)\n      tokens.push({type, content: newWord})\n      continue\n    }\n\n    tokens.push({type, content: word})\n  }\n}\n\nconst push = [].push\n\nexport function lexSkipTag (tagName, state) {\n  const {str, position, tokens} = state\n  const safeTagName = tagName.toLowerCase()\n  const len = str.length\n  let index = position.index\n  while (index < len) {\n    const nextTag = str.indexOf('</', index)\n    if (nextTag === -1) {\n      lexText(state)\n      break\n    }\n\n    const tagStartPosition = copyPosition(position)\n    jumpPosition(tagStartPosition, str, nextTag)\n    const tagState = {str, position: tagStartPosition, tokens: []}\n    const name = lexTag(tagState)\n    if (safeTagName !== name.toLowerCase()) {\n      index = tagState.position.index\n      continue\n    }\n\n    if (nextTag !== position.index) {\n      const textStart = copyPosition(position)\n      jumpPosition(position, str, nextTag)\n      tokens.push({\n        type: 'text',\n        content: str.slice(textStart.index, nextTag),\n        position: {\n          start: textStart,\n          end: copyPosition(position)\n        }\n      })\n    }\n\n    push.apply(tokens, tagState.tokens)\n    jumpPosition(position, str, tagState.position.index)\n    break\n  }\n}\n", "const selectTypes = [[ 'class', '.'], [ 'id', '#'], [ 'data', '[']]\n\nconst buildElSelectors = (selCheck, selAttr, key, attr) => {\n  // Get the element selectors,\n  let elSelect = selAttr && selAttr.selector\n  \n  if(key !== 'tagConvert'){\n    // If it's just a string set it, and return\n    // This means all items should be coverted\n    // i.e. class='className'\n    if(typeof selAttr === 'string' || typeof selAttr === 'function'){\n      selCheck[key][attr] = selAttr\n      return\n    }\n\n    // If there's no selectors, loop the selAttr and add the keys \n    // to the elementSelector\n    if(selAttr && !elSelect && Object.keys(selAttr).length){\n      elSelect = {}\n      Object.keys(selAttr).map(key => {\n        elSelect[key] = selAttr[key]\n      })\n    }\n\n    if(!elSelect){\n      if(selAttr === null) selCheck[key][attr] = null\n      return\n    }\n    // Set the default for the selCheck items\n    selCheck[key][attr] = selCheck[key][attr] || {}\n  }\n  else {\n    elSelect = {}\n    elSelect[attr] = selAttr\n  }\n\n  return elSelect\n}\n\n\nconst findSelector = (hasSelectors, elSelectors, select, props, tag) => {\n  let el\n  // Loop selector types and add to select checker\n  // This checks for a class / id / attribute on the select item\n  selectTypes.map(type => {\n    // If it has the passed in type in the string convert it, and add the the props\n    if(tag.indexOf(type[1]) !== -1){\n      const split = tag.split(type[1])\n      if(type[0] === 'data'){\n        const dataSplit = split[1].split('=')\n        const key = clean(dataSplit[0].replace(']', ''))\n        const dataKey = dataSplit[1] && clean(dataSplit[1].replace(']', '')) || ''\n        props[key] = { ...props[key], [dataKey]: elSelectors[select] }\n      }\n      else {\n        props[type[0]] = {\n          ...props[type[0]],\n          [clean(split[1])]: elSelectors[select]\n        }\n      }\n\n      el = clean(split[0])\n      if(el.indexOf('.') !== -1 || el.indexOf('#') !== -1 || el.indexOf('[') !== -1 ){\n        console.warn(`Error: \"${el}\" is not formatted correctly. It contains one of \". # [\"`)\n      }\n      // Update that we have a select type on the selector\n      hasSelectors.push(true)\n    }\n  })\n\n  return el\n}\n\nconst setupSelectors = (selCheck, options) => {\n  const selectorArr = Object.keys(selCheck)\n  Object.keys(options).map(key => {\n    // Only check keys from the selector Array\n    if(selectorArr.indexOf(key) === -1) return\n    \n    const props = {}\n    Object.keys(options[key]).map(attr => {\n      // Get the attribute to be checked - i.e. class / id / name\n      const attribute = options[key][attr]\n      let elSelectors = buildElSelectors(selCheck, attribute, key, attr)\n      if(!elSelectors) return\n\n      // chache selector type\n      const isArr = Array.isArray(elSelectors)\n      // check that is has a value to return\n      if(isArr){\n        // If it's an array and there is no value, we have no way to conver the items\n        // So just return\n        if(!options[key][attr].value) return\n        // Otherwise set the items\n        selCheck[key][attr].value = options[key][attr].value\n      }\n\n      Object.keys(elSelectors).map(select => {\n        // Selector tags - i.e. input.class / button#primary / select[td-select]\n        const tags = isArr && elSelectors[select] || select\n        // split all tags if more then 1\n        const allTags = tags.split(',')\n        // loop tags and split on selector type - i.e. class / id / name\n        allTags.map(_tag => {\n          const tag = clean(_tag)\n          const hasSelectors = []\n          let el = findSelector(hasSelectors, elSelectors, select, props, tag)\n          // Check if a select type was found on the selector\n          // This will be an array of true if it had a select type on it\n          // If no class / id / attribute was found on the selector, it will be an empty array\n          // ------------------ ELEMENT WITH A SELECTOR ------------------ //\n          if(hasSelectors.indexOf(true) !== -1){\n            const loc = key !== 'tagConvert'\n              ? attr\n              : el\n            selCheck[key] = selCheck[key] || {}\n            selCheck[key][loc] = selCheck[key][loc] || {}\n            selCheck[key][loc][el] = { ...selCheck[key][loc][el], ...props }\n          }\n          // ------------------ ALL OF ELEMENT TYPE ------------------ //\n          else {\n            const loc = key !== 'tagConvert'\n              ? attr\n              : tag\n              \n            selCheck[key] = selCheck[key] || {}\n            selCheck[key][loc] = selCheck[key][loc] || {}\n            selCheck[key][loc][tag] = selCheck[key][loc][tag] || {}\n            selCheck[key][loc][tag].all = elSelectors[select]\n          }\n        })\n      })\n    })\n  })\n\n  return selCheck\n}\n\nconst addChildren = (block, childs) => {\n  const addChilds = childs.length === 1 && typeof childs[0] === 'string'\n    ? childs[0]\n    : childs.length && childs || null\n\n  if(addChilds) {\n    if(!block[2]) block[2] = addChilds\n    else if(Array.isArray(block[2])) block[2] = block[2].concat(addChilds)\n    else block[2] = [block[2]].concat(addChilds)\n  }\n  return block\n}\n\nconst convertCase = text => {\n  let converted = ''\n  const text_split = text.split('-')\n  if(!text_split.length) return text\n  converted += text_split.shift()\n  text_split.map(val => {\n    converted += val.charAt(0).toUpperCase() + val.slice(1)\n  })\n  return converted\n}\n\nconst convertStyle = styles => {\n  const valObj = {}\n  const val_split = styles.trim().split(';')\n  \n  Array.isArray(val_split) &&\n    val_split[0].trim() !== '' &&\n    val_split.map(item => {\n      if (item.indexOf(':') !== -1) {\n        const item_split = item.split(':')\n        if (Array.isArray(item_split) && item_split.length === 2) {\n          if (item_split[0].trim() !== '' && item_split[1].trim() !== '') {\n            valObj[convertCase(item_split[0].trim())] = item_split[1].trim()\n          }\n        }\n      }\n    })\n\n  return valObj\n}\n\nconst splitKeyValue = (str, sep) => {\n  const idx = str.indexOf(sep)\n  if (idx === -1) return [str]\n  return [str.slice(0, idx), str.slice(idx + sep.length)]\n}\n\nconst clean = (str) => {\n  return str && unquote(str.trim()).trim() || ''\n}\n\nconst unquote = str => {\n  const car = str.charAt(0)\n  const end = str.length - 1\n  const isQuoteStart = car === '\"' || car === \"'\"\n  if (isQuoteStart && car === str.charAt(end)) {\n    return str.slice(1, end)\n  }\n  return str\n}\n\nexport {\n  addChildren,\n  convertCase,\n  convertStyle,\n  setupSelectors,\n  splitKeyValue,\n  unquote\n}", "import {arrayIncludes} from './compat'\n\nimport {\n  splitKeyValue,\n  unquote,\n} from './helpers'\n\nexport default function parser (tokens, options) {\n  const root = {tagName: null, children: []}\n  const state = {tokens, options, cursor: 0, stack: [root]}\n  parse(state)\n  return root.children\n}\n\nexport function hasTerminalParent (tagName, stack, terminals) {\n  const tagParents = terminals[tagName]\n  if (tagParents) {\n    let currentIndex = stack.length - 1\n    while (currentIndex >= 0) {\n      const parentTagName = stack[currentIndex].tagName\n      if (parentTagName === tagName) {\n        break\n      }\n      if (arrayIncludes(tagParents, parentTagName)) {\n        return true\n      }\n      currentIndex--\n    }\n  }\n  return false\n}\n\nexport function parse (state) {\n  const {tokens, options} = state\n  let {stack} = state\n  let nodes = stack[stack.length - 1].children\n  const len = tokens.length\n  let {cursor} = state\n  while (cursor < len) {\n    const token = tokens[cursor]\n    if (token.type !== 'tag-start') {\n      nodes.push(token)\n      cursor++\n      continue\n    }\n\n    const tagToken = tokens[++cursor]\n    cursor++\n    const tagName = tagToken.content.toLowerCase()\n    if (token.close) {\n      let index = stack.length\n      let didRewind = false\n      while (--index > -1) {\n        if (stack[index].tagName === tagName) {\n          stack.splice(index)\n          didRewind = true\n          break\n        }\n      }\n      while (cursor < len) {\n        const endToken = tokens[cursor]\n        if (endToken.type !== 'tag-end') break\n        cursor++\n      }\n      if (didRewind) {\n        break\n      } else {\n        continue\n      }\n    }\n\n    const isClosingTag = arrayIncludes(options.closingTags, tagName)\n    let shouldRewindToAutoClose = isClosingTag\n    if (shouldRewindToAutoClose) {\n      const { closingTagAncestorBreakers: terminals } = options\n      shouldRewindToAutoClose = !hasTerminalParent(tagName, stack, terminals)\n    }\n\n    if (shouldRewindToAutoClose) {\n      // rewind the stack to just above the previous\n      // closing tag of the same name\n      let currentIndex = stack.length - 1\n      while (currentIndex > 0) {\n        if (tagName === stack[currentIndex].tagName) {\n          stack = stack.slice(0, currentIndex)\n          const previousIndex = currentIndex - 1\n          nodes = stack[previousIndex].children\n          break\n        }\n        currentIndex = currentIndex - 1\n      }\n    }\n\n    let attributes = []\n    let attrToken\n    while (cursor < len) {\n      attrToken = tokens[cursor]\n      if (attrToken.type === 'tag-end') break\n      attributes.push(attrToken.content)\n      cursor++\n    }\n\n    cursor++\n    const children = []\n\n    attributes = Array.isArray(attributes) && attributes.length\n      ? attributes.reduce((attrs, attr) => {\n          const parts = splitKeyValue(attr, '=') \n          attrs[parts[0]] = parts[1] && unquote(parts[1]) || ''\n          return attrs\n        }, {})\n      : {}\n\n    nodes.push({\n      0: tagToken.content,\n      1: attributes,\n      2: children\n    })\n\n    const hasChildren = !(attrToken.close || arrayIncludes(options.voidTags, tagName))\n    if (hasChildren) {\n      stack.push({tagName, children})\n      const innerState = {tokens, options, cursor, stack}\n      parse(innerState)\n      cursor = innerState.cursor\n    }\n  }\n  state.cursor = cursor\n}", "const propMap = {\n  // HTML\n  accept: 'accept',\n  acceptcharset: 'acceptCharset',\n  'accept-charset': 'acceptCharset',\n  accesskey: 'accessKey',\n  action: 'action',\n  allowfullscreen: 'allowFullScreen',\n  alt: 'alt',\n  as: 'as',\n  async: 'async',\n  autocapitalize: 'autoCapitalize',\n  autocomplete: 'autoComplete',\n  autocorrect: 'autoCorrect',\n  autofocus: 'autoFocus',\n  autoplay: 'autoPlay',\n  autosave: 'autoSave',\n  capture: 'capture',\n  cellpadding: 'cellPadding',\n  cellspacing: 'cellSpacing',\n  challenge: 'challenge',\n  charset: 'charSet',\n  checked: 'checked',\n  children: 'children',\n  cite: 'cite',\n  class: 'className',\n  classid: 'classID',\n  classname: 'className',\n  cols: 'cols',\n  colspan: 'colSpan',\n  content: 'content',\n  contenteditable: 'contentEditable',\n  contextmenu: 'contextMenu',\n  controls: 'controls',\n  controlslist: 'controlsList',\n  coords: 'coords',\n  crossorigin: 'crossOrigin',\n  dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',\n  data: 'data',\n  datetime: 'dateTime',\n  default: 'default',\n  defaultchecked: 'defaultChecked',\n  defaultvalue: 'defaultValue',\n  defer: 'defer',\n  dir: 'dir',\n  disabled: 'disabled',\n  download: 'download',\n  draggable: 'draggable',\n  enctype: 'encType',\n  for: 'htmlFor',\n  form: 'form',\n  formmethod: 'formMethod',\n  formaction: 'formAction',\n  formenctype: 'formEncType',\n  formnovalidate: 'formNoValidate',\n  formtarget: 'formTarget',\n  frameborder: 'frameBorder',\n  headers: 'headers',\n  height: 'height',\n  hidden: 'hidden',\n  high: 'high',\n  href: 'href',\n  hreflang: 'hrefLang',\n  htmlfor: 'htmlFor',\n  httpequiv: 'httpEquiv',\n  'http-equiv': 'httpEquiv',\n  icon: 'icon',\n  id: 'id',\n  innerhtml: 'innerHTML',\n  inputmode: 'inputMode',\n  integrity: 'integrity',\n  is: 'is',\n  itemid: 'itemID',\n  itemprop: 'itemProp',\n  itemref: 'itemRef',\n  itemscope: 'itemScope',\n  itemtype: 'itemType',\n  keyparams: 'keyParams',\n  keytype: 'keyType',\n  kind: 'kind',\n  label: 'label',\n  lang: 'lang',\n  list: 'list',\n  loop: 'loop',\n  low: 'low',\n  manifest: 'manifest',\n  marginwidth: 'marginWidth',\n  marginheight: 'marginHeight',\n  max: 'max',\n  maxlength: 'maxLength',\n  media: 'media',\n  mediagroup: 'mediaGroup',\n  method: 'method',\n  min: 'min',\n  minlength: 'minLength',\n  multiple: 'multiple',\n  muted: 'muted',\n  name: 'name',\n  nomodule: 'noModule',\n  nonce: 'nonce',\n  novalidate: 'noValidate',\n  open: 'open',\n  optimum: 'optimum',\n  pattern: 'pattern',\n  placeholder: 'placeholder',\n  playsinline: 'playsInline',\n  poster: 'poster',\n  preload: 'preload',\n  profile: 'profile',\n  radiogroup: 'radioGroup',\n  readonly: 'readOnly',\n  referrerpolicy: 'referrerPolicy',\n  rel: 'rel',\n  required: 'required',\n  reversed: 'reversed',\n  role: 'role',\n  rows: 'rows',\n  rowspan: 'rowSpan',\n  sandbox: 'sandbox',\n  scope: 'scope',\n  scoped: 'scoped',\n  scrolling: 'scrolling',\n  seamless: 'seamless',\n  selected: 'selected',\n  shape: 'shape',\n  size: 'size',\n  sizes: 'sizes',\n  span: 'span',\n  spellcheck: 'spellCheck',\n  src: 'src',\n  srcdoc: 'srcDoc',\n  srclang: 'srcLang',\n  srcset: 'srcSet',\n  start: 'start',\n  step: 'step',\n  style: 'style',\n  summary: 'summary',\n  tabindex: 'tabIndex',\n  target: 'target',\n  title: 'title',\n  type: 'type',\n  usemap: 'useMap',\n  value: 'value',\n  width: 'width',\n  wmode: 'wmode',\n  wrap: 'wrap',\n\n  // SVG\n  about: 'about',\n  accentheight: 'accentHeight',\n  'accent-height': 'accentHeight',\n  accumulate: 'accumulate',\n  additive: 'additive',\n  alignmentbaseline: 'alignmentBaseline',\n  'alignment-baseline': 'alignmentBaseline',\n  allowreorder: 'allowReorder',\n  alphabetic: 'alphabetic',\n  amplitude: 'amplitude',\n  arabicform: 'arabicForm',\n  'arabic-form': 'arabicForm',\n  ascent: 'ascent',\n  attributename: 'attributeName',\n  attributetype: 'attributeType',\n  autoreverse: 'autoReverse',\n  azimuth: 'azimuth',\n  basefrequency: 'baseFrequency',\n  baselineshift: 'baselineShift',\n  'baseline-shift': 'baselineShift',\n  baseprofile: 'baseProfile',\n  bbox: 'bbox',\n  begin: 'begin',\n  bias: 'bias',\n  by: 'by',\n  calcmode: 'calcMode',\n  capheight: 'capHeight',\n  'cap-height': 'capHeight',\n  clip: 'clip',\n  clippath: 'clipPath',\n  'clip-path': 'clipPath',\n  clippathunits: 'clipPathUnits',\n  cliprule: 'clipRule',\n  'clip-rule': 'clipRule',\n  color: 'color',\n  colorinterpolation: 'colorInterpolation',\n  'color-interpolation': 'colorInterpolation',\n  colorinterpolationfilters: 'colorInterpolationFilters',\n  'color-interpolation-filters': 'colorInterpolationFilters',\n  colorprofile: 'colorProfile',\n  'color-profile': 'colorProfile',\n  colorrendering: 'colorRendering',\n  'color-rendering': 'colorRendering',\n  contentscripttype: 'contentScriptType',\n  contentstyletype: 'contentStyleType',\n  cursor: 'cursor',\n  cx: 'cx',\n  cy: 'cy',\n  d: 'd',\n  datatype: 'datatype',\n  decelerate: 'decelerate',\n  descent: 'descent',\n  diffuseconstant: 'diffuseConstant',\n  direction: 'direction',\n  display: 'display',\n  divisor: 'divisor',\n  dominantbaseline: 'dominantBaseline',\n  'dominant-baseline': 'dominantBaseline',\n  dur: 'dur',\n  dx: 'dx',\n  dy: 'dy',\n  edgemode: 'edgeMode',\n  elevation: 'elevation',\n  enablebackground: 'enableBackground',\n  'enable-background': 'enableBackground',\n  end: 'end',\n  exponent: 'exponent',\n  externalresourcesrequired: 'externalResourcesRequired',\n  fill: 'fill',\n  fillopacity: 'fillOpacity',\n  'fill-opacity': 'fillOpacity',\n  fillrule: 'fillRule',\n  'fill-rule': 'fillRule',\n  filter: 'filter',\n  filterres: 'filterRes',\n  filterunits: 'filterUnits',\n  floodopacity: 'floodOpacity',\n  'flood-opacity': 'floodOpacity',\n  floodcolor: 'floodColor',\n  'flood-color': 'floodColor',\n  focusable: 'focusable',\n  fontfamily: 'fontFamily',\n  'font-family': 'fontFamily',\n  fontsize: 'fontSize',\n  'font-size': 'fontSize',\n  fontsizeadjust: 'fontSizeAdjust',\n  'font-size-adjust': 'fontSizeAdjust',\n  fontstretch: 'fontStretch',\n  'font-stretch': 'fontStretch',\n  fontstyle: 'fontStyle',\n  'font-style': 'fontStyle',\n  fontvariant: 'fontVariant',\n  'font-variant': 'fontVariant',\n  fontweight: 'fontWeight',\n  'font-weight': 'fontWeight',\n  format: 'format',\n  from: 'from',\n  fx: 'fx',\n  fy: 'fy',\n  g1: 'g1',\n  g2: 'g2',\n  glyphname: 'glyphName',\n  'glyph-name': 'glyphName',\n  glyphorientationhorizontal: 'glyphOrientationHorizontal',\n  'glyph-orientation-horizontal': 'glyphOrientationHorizontal',\n  glyphorientationvertical: 'glyphOrientationVertical',\n  'glyph-orientation-vertical': 'glyphOrientationVertical',\n  glyphref: 'glyphRef',\n  gradienttransform: 'gradientTransform',\n  gradientunits: 'gradientUnits',\n  hanging: 'hanging',\n  horizadvx: 'horizAdvX',\n  'horiz-adv-x': 'horizAdvX',\n  horizoriginx: 'horizOriginX',\n  'horiz-origin-x': 'horizOriginX',\n  ideographic: 'ideographic',\n  imagerendering: 'imageRendering',\n  'image-rendering': 'imageRendering',\n  in2: 'in2',\n  in: 'in',\n  inlist: 'inlist',\n  intercept: 'intercept',\n  k1: 'k1',\n  k2: 'k2',\n  k3: 'k3',\n  k4: 'k4',\n  k: 'k',\n  kernelmatrix: 'kernelMatrix',\n  kernelunitlength: 'kernelUnitLength',\n  kerning: 'kerning',\n  keypoints: 'keyPoints',\n  keysplines: 'keySplines',\n  keytimes: 'keyTimes',\n  lengthadjust: 'lengthAdjust',\n  letterspacing: 'letterSpacing',\n  'letter-spacing': 'letterSpacing',\n  lightingcolor: 'lightingColor',\n  'lighting-color': 'lightingColor',\n  limitingconeangle: 'limitingConeAngle',\n  local: 'local',\n  markerend: 'markerEnd',\n  'marker-end': 'markerEnd',\n  markerheight: 'markerHeight',\n  markermid: 'markerMid',\n  'marker-mid': 'markerMid',\n  markerstart: 'markerStart',\n  'marker-start': 'markerStart',\n  markerunits: 'markerUnits',\n  markerwidth: 'markerWidth',\n  mask: 'mask',\n  maskcontentunits: 'maskContentUnits',\n  maskunits: 'maskUnits',\n  mathematical: 'mathematical',\n  mode: 'mode',\n  numoctaves: 'numOctaves',\n  offset: 'offset',\n  opacity: 'opacity',\n  operator: 'operator',\n  order: 'order',\n  orient: 'orient',\n  orientation: 'orientation',\n  origin: 'origin',\n  overflow: 'overflow',\n  overlineposition: 'overlinePosition',\n  'overline-position': 'overlinePosition',\n  overlinethickness: 'overlineThickness',\n  'overline-thickness': 'overlineThickness',\n  paintorder: 'paintOrder',\n  'paint-order': 'paintOrder',\n  panose1: 'panose1',\n  'panose-1': 'panose1',\n  pathlength: 'pathLength',\n  patterncontentunits: 'patternContentUnits',\n  patterntransform: 'patternTransform',\n  patternunits: 'patternUnits',\n  pointerevents: 'pointerEvents',\n  'pointer-events': 'pointerEvents',\n  points: 'points',\n  pointsatx: 'pointsAtX',\n  pointsaty: 'pointsAtY',\n  pointsatz: 'pointsAtZ',\n  prefix: 'prefix',\n  preservealpha: 'preserveAlpha',\n  preserveaspectratio: 'preserveAspectRatio',\n  primitiveunits: 'primitiveUnits',\n  property: 'property',\n  r: 'r',\n  radius: 'radius',\n  refx: 'refX',\n  refy: 'refY',\n  renderingintent: 'renderingIntent',\n  'rendering-intent': 'renderingIntent',\n  repeatcount: 'repeatCount',\n  repeatdur: 'repeatDur',\n  requiredextensions: 'requiredExtensions',\n  requiredfeatures: 'requiredFeatures',\n  resource: 'resource',\n  restart: 'restart',\n  result: 'result',\n  results: 'results',\n  rotate: 'rotate',\n  rx: 'rx',\n  ry: 'ry',\n  scale: 'scale',\n  security: 'security',\n  seed: 'seed',\n  shaperendering: 'shapeRendering',\n  'shape-rendering': 'shapeRendering',\n  slope: 'slope',\n  spacing: 'spacing',\n  specularconstant: 'specularConstant',\n  specularexponent: 'specularExponent',\n  speed: 'speed',\n  spreadmethod: 'spreadMethod',\n  startoffset: 'startOffset',\n  stddeviation: 'stdDeviation',\n  stemh: 'stemh',\n  stemv: 'stemv',\n  stitchtiles: 'stitchTiles',\n  stopcolor: 'stopColor',\n  'stop-color': 'stopColor',\n  stopopacity: 'stopOpacity',\n  'stop-opacity': 'stopOpacity',\n  strikethroughposition: 'strikethroughPosition',\n  'strikethrough-position': 'strikethroughPosition',\n  strikethroughthickness: 'strikethroughThickness',\n  'strikethrough-thickness': 'strikethroughThickness',\n  string: 'string',\n  stroke: 'stroke',\n  strokedasharray: 'strokeDasharray',\n  'stroke-dasharray': 'strokeDasharray',\n  strokedashoffset: 'strokeDashoffset',\n  'stroke-dashoffset': 'strokeDashoffset',\n  strokelinecap: 'strokeLinecap',\n  'stroke-linecap': 'strokeLinecap',\n  strokelinejoin: 'strokeLinejoin',\n  'stroke-linejoin': 'strokeLinejoin',\n  strokemiterlimit: 'strokeMiterlimit',\n  'stroke-miterlimit': 'strokeMiterlimit',\n  strokewidth: 'strokeWidth',\n  'stroke-width': 'strokeWidth',\n  strokeopacity: 'strokeOpacity',\n  'stroke-opacity': 'strokeOpacity',\n  suppresscontenteditablewarning: 'suppressContentEditableWarning',\n  suppresshydrationwarning: 'suppressHydrationWarning',\n  surfacescale: 'surfaceScale',\n  systemlanguage: 'systemLanguage',\n  tablevalues: 'tableValues',\n  targetx: 'targetX',\n  targety: 'targetY',\n  textanchor: 'textAnchor',\n  'text-anchor': 'textAnchor',\n  textdecoration: 'textDecoration',\n  'text-decoration': 'textDecoration',\n  textlength: 'textLength',\n  textrendering: 'textRendering',\n  'text-rendering': 'textRendering',\n  to: 'to',\n  transform: 'transform',\n  typeof: 'typeof',\n  u1: 'u1',\n  u2: 'u2',\n  underlineposition: 'underlinePosition',\n  'underline-position': 'underlinePosition',\n  underlinethickness: 'underlineThickness',\n  'underline-thickness': 'underlineThickness',\n  unicode: 'unicode',\n  unicodebidi: 'unicodeBidi',\n  'unicode-bidi': 'unicodeBidi',\n  unicoderange: 'unicodeRange',\n  'unicode-range': 'unicodeRange',\n  unitsperem: 'unitsPerEm',\n  'units-per-em': 'unitsPerEm',\n  unselectable: 'unselectable',\n  valphabetic: 'vAlphabetic',\n  'v-alphabetic': 'vAlphabetic',\n  values: 'values',\n  vectoreffect: 'vectorEffect',\n  'vector-effect': 'vectorEffect',\n  version: 'version',\n  vertadvy: 'vertAdvY',\n  'vert-adv-y': 'vertAdvY',\n  vertoriginx: 'vertOriginX',\n  'vert-origin-x': 'vertOriginX',\n  vertoriginy: 'vertOriginY',\n  'vert-origin-y': 'vertOriginY',\n  vhanging: 'vHanging',\n  'v-hanging': 'vHanging',\n  videographic: 'vIdeographic',\n  'v-ideographic': 'vIdeographic',\n  viewbox: 'viewBox',\n  viewtarget: 'viewTarget',\n  visibility: 'visibility',\n  vmathematical: 'vMathematical',\n  'v-mathematical': 'vMathematical',\n  vocab: 'vocab',\n  widths: 'widths',\n  wordspacing: 'wordSpacing',\n  'word-spacing': 'wordSpacing',\n  writingmode: 'writingMode',\n  'writing-mode': 'writingMode',\n  x1: 'x1',\n  x2: 'x2',\n  x: 'x',\n  xchannelselector: 'xChannelSelector',\n  xheight: 'xHeight',\n  'x-height': 'xHeight',\n  xlinkactuate: 'xlinkActuate',\n  'xlink:actuate': 'xlinkActuate',\n  xlinkarcrole: 'xlinkArcrole',\n  'xlink:arcrole': 'xlinkArcrole',\n  xlinkhref: 'xlinkHref',\n  'xlink:href': 'xlinkHref',\n  xlinkrole: 'xlinkRole',\n  'xlink:role': 'xlinkRole',\n  xlinkshow: 'xlinkShow',\n  'xlink:show': 'xlinkShow',\n  xlinktitle: 'xlinkTitle',\n  'xlink:title': 'xlinkTitle',\n  xlinktype: 'xlinkType',\n  'xlink:type': 'xlinkType',\n  xmlbase: 'xmlBase',\n  'xml:base': 'xmlBase',\n  xmllang: 'xmlLang',\n  'xml:lang': 'xmlLang',\n  xmlns: 'xmlns',\n  'xml:space': 'xmlSpace',\n  xmlnsxlink: 'xmlnsXlink',\n  'xmlns:xlink': 'xmlnsXlink',\n  xmlspace: 'xmlSpace',\n  y1: 'y1',\n  y2: 'y2',\n  y: 'y',\n  ychannelselector: 'yChannelSelector',\n  z: 'z',\n  zoomandpan: 'zoomAndPan',\n};\n\nconst revPropMap = Object.entries(propMap)\n    .reduce((obj, [key, value]) => ({ ...obj, [value]: key }), {});\n\nexport {\n  propMap,\n  revPropMap\n}\n", "import {arrayIncludes} from './compat'\nimport { revPropMap } from './prop_map'\n\nlet options = {\n  attrLowerCase: false,\n  styleAsCss: false\n}\n\nexport function formatAttributes (attributes, options) {\n  let attrString = Object.keys(attributes).reduce((attrs, currentKey) => {\n    let key = currentKey\n    if(options.hasOpts && options.attrLowerCase && revPropMap[currentKey]) key = revPropMap[currentKey]\n    \n    let value = attributes[currentKey]\n    if (!value) return `${attrs} ${key}`\n    else if(key === 'style' && typeof value === 'object'){\n      let styles = ''\n      Object.keys(value).map(_name => {\n        let name = _name\n        if(options.hasOpts && options.styleAsCss) name = _name.split(/(?=[A-Z])/).join('-').toLowerCase()\n        \n        styles += `${name}:${value[_name]};`\n      })\n      const quoteEscape = styles.indexOf('\\'') !== -1\n      const quote = quoteEscape ? '\"' : '\\''\n      return `${attrs} ${key}=${quote}${styles}${quote}`\n    }\n    if(typeof value === 'boolean') value = `${value}`\n    \n    if(typeof value === 'string'){\n      const quoteEscape = value.indexOf('\\'') !== -1\n      const quote = quoteEscape ? '\"' : '\\''\n      return `${attrs} ${key}=${quote}${value}${quote}`\n    }\n    return attrs\n  }, '')\n  \n  attrString = typeof attrString === 'string' && attrString.trim() || ''\n  return attrString.length\n    ? ' '+attrString\n    : ''\n}\n\nconst buildTag = (tagName, attributes, children, options) => {\n\n  return `<${tagName}${formatAttributes(attributes, options)}>${toHTML(children, options) || '' }</${tagName}>`\n}\n\nconst buildSelfCloseTag = (tagName, attributes, options) => {\n  let formatted = formatAttributes(attributes, options)\n  formatted = formatted.length\n    ? formatted + ' '\n    : formatted\n  return `<${tagName}${formatted}${'/'}>`\n}\n\n\nexport function toHTML (tree, _options) {\n\n  options = options.hasOpts\n    ? Object.assign(options, _options)\n    : _options\n  \n  if (typeof tree === 'string') return tree\n  return tree && tree.map(node => {\n    if (typeof node === 'string') return node\n    if (node.type === 'comment') return `<!--${node.content}-->`\n    const tagName = node[0]\n    const attributes = node[1]\n    const children = node[2]\n    \n    // If element does not have children\n    // Theck we want to do a lowerCase check\n    // If el does have children, then only do a direct match\n    // Any self closing tags should not have children, and uppercase letters\n    const tagCheck = !children && tagName.toLowerCase() || tagName\n    const isSelfClosing = arrayIncludes(options.voidTags, tagCheck)\n\n    return isSelfClosing\n      ? buildSelfCloseTag(tagName, attributes, options)\n      : buildTag(tagName, attributes, children, options)\n  }).join('')\n}\n\nexport default {toHTML}\n", "import { propMap } from './prop_map'\nimport {\n  addChildren,\n  convertStyle,\n  setupSelectors,\n  unquote\n} from './helpers'\n\n\nlet options = {\n  root: {\n    0: 'div',\n  },\n  tagConvert: {},\n  attrKeyConvert: {},\n  attrValueConvert: {},\n  attrKeyAdd: {},\n  attrCamelCase: false,\n  trim: false,\n  lowerCaseTag: true,\n  comments: true\n}\n\nlet selectorCheck = {\n  tagConvert: {},\n  attrKeyConvert: {},\n  attrValueConvert: {},\n  attrKeyAdd: {},\n}\nlet attrArrEmpty = true\nconst domTagAction = '$$DOM_TAG_NAME'\n\nconst convertBlock = (block, parent, nodes, children, tree) => {\n  const data = selectorCheck.tagConvert[block[0]]\n    ? runAction({\n        action: selectorCheck.tagConvert[block[0]],\n        node: block,\n        key: domTagAction,\n        value: block[0],\n        nodes,\n        children\n      }, 'value')\n    : block[0]\n  if(typeof data === 'string') block[0] = data\n  if(typeof data === 'object') block = data\n  \n  // If the block has attributes, loop over attrs and format based on settings\n  block[1] = typeof block[1] === 'object'\n    ? Object.keys(block[1]).reduce((attrs, key) => {\n        let useKey = selectorCheck.attrKeyConvert[key]\n          ? runAction({\n              action: selectorCheck.attrKeyConvert[key],\n              node: block,\n              value: block[1][key],\n              key,\n              nodes,\n              children\n            }, 'key')\n          : key\n        \n        useKey = options.attrCamelCase && propMap[useKey] || useKey\n\n        if(useKey && block[1][key]){\n          attrs[useKey] = selectorCheck.attrValueConvert[key]\n            ? runAction({\n                action: selectorCheck.attrValueConvert[key],\n                node: block,\n                value: block[1][key],\n                key,\n                nodes,\n                children\n              }, 'value')\n            : typeof block[1][key] === 'string'\n              ? unquote(block[1][key])\n              : block[1][key]\n        }\n\n        return attrs\n      }, {})\n    : {}\n\n  // If first child is an array, loop over each child\n  if(block[2] &&  typeof block[2] !== 'string' && block[2].length){\n    block[2] = block[2].map(child => {\n      return convertBlock(child, block, nodes, children, tree)\n    })\n  }\n\n  return tree && allElementsCB(block, parent, tree) || block\n}\n\nconst buildBlock = (org, added, nodes, children, parent) => {\n  org[0] = added[0]\n  org[1] = { ...org[1], ...added[1] }\n  if(added[2]) org[2] = added[2]\n  return convertBlock(org, parent, nodes, children)\n}\n\nconst tagConvert = ({ action, node, value, nodes, children, parent, block }) => {\n\n  const tagName = node[0]\n  if(!tagName) return block\n  block[0] = options.lowerCaseTag\n    ? tagName.toLowerCase()\n    : tagName\n\n  if(typeof action === 'function'){\n    let data = runAction({\n      key: domTagAction,\n      value: block[0],\n      action,\n      node,\n      nodes,\n      children\n    }, 'value')\n    if(!data) return block\n    if(typeof data === 'string') data = { 0: data }\n    \n    if(typeof data === 'object')\n      block = buildBlock(block, data, nodes, children, parent)\n  }\n  else if(typeof action === 'object' && !Array.isArray(action) && action[0]){\n    block = buildBlock(block, action, nodes, children, parent)\n  }\n  else {\n    const data = runAction({\n      key: domTagAction,\n      value: block[0],\n      action,\n      node,\n      nodes,\n      children\n    }, 'value')\n    if(typeof data === 'string') block[0] = data\n    if(typeof data === 'object'){\n      block = buildBlock(block, data, nodes, children, parent)\n    }\n  }\n  return block\n}\n\n// ----------- Formatters ----------- //\nconst format = ({ parent, childs, nodes, tree, ...args }) => {\n  return childs\n    ? childs.reduce((children, node) => {\n        nodes = nodes || childs\n        const child = node.type === 'text' || node.type === 'comment'\n          ? filterFS(node, parent)\n          : formatNode({\n              node,\n              childs,\n              nodes,\n              children,\n              tree,\n              parent\n            })\n        child && children.push(child)\n        return children\n      }, [])\n    : []\n}\n\nconst formatNode = ({ node, nodes, children, tree, parent }) => {\n  // Check if the node needs to be converted\n  // If it does, run the conversion\n  // Otherwise set the default \n  const block = selectorCheck.tagConvert[node[0]]\n    ? tagConvert({\n        action: selectorCheck.tagConvert[node[0]],\n        block: {},\n        value: node[0],\n        node,\n        nodes,\n        children,\n        parent\n      })\n    : { 0: node[0] }\n\n  console.log(`------- block -------`)\n  console.log(block)\n\n  // Build any of the current attrs\n  const attrs = formatAttributes({\n    attributes: node[1],\n    node,\n    nodes,\n    children\n  })\n  \n  console.log(`------- attrs -------`)\n  console.log(attrs)\n\n  // current attr data get merge after the data from the node\n  // This is because the only way the block will have attrs is if it was tagConverted\n  block[1] = { ...attrs, ...block[1] }\n\n  return allElementsCB(\n    // Add the children to the block\n    addChildren(\n      block,\n      // Format the children before adding to the block\n      format({\n        tree,\n        childs: node[2],\n        parent: block,\n        nodes,\n        children\n      })\n    ),\n    parent,\n    tree\n  )\n  \n  \n}\n\nconst formatAttributes = (args) => {\n  const { node, nodes, children } = args\n  let { attributes } = args\n  attributes = attributes || {}\n  const attrs = {}\n\n  Object.keys(attributes).map(item => {\n    const parts = [ item, attributes[item]]\n    \n    if(selectorCheck.attrKeyConvert[parts[0]] === null) return\n    \n    let key = selectorCheck.attrKeyConvert[parts[0]]\n      ? runAction({\n          action: selectorCheck.attrKeyConvert[parts[0]],\n          key: parts[0],\n          value: parts[1],\n          node,\n          nodes,\n          children\n        }, 'key')\n      : parts[0]\n    \n    key = options.attrCamelCase && propMap[key] || key\n    \n    const value = typeof parts[1] === 'string' || typeof parts[1] === 'object'\n      ? formatValue({\n          key: parts[0],\n          value: parts[1],\n          node,\n          nodes,\n          children\n        })\n      : null\n\n    if(key){\n      if((key === 'className' || key === 'class') && value === '') attrs[key] = ''\n      if(key === 'id' && !value) return\n      attrs[key] = value || value === false\n        ? value\n        : true\n    }\n\n  })\n  \n  if(attrArrEmpty) return attrs\n  \n  return addAttribute({\n    node,\n    attrs,\n    nodes,\n    children\n  })\n  \n}\n\nconst formatValue = (args) => {\n  const { node, key, value, nodes, children } = args\n  const updatedVal = key === 'style' && typeof value === 'string'\n    ? convertStyle(unquote(value))\n    : selectorCheck.attrValueConvert[key]\n      ? runAction({\n          action: selectorCheck.attrValueConvert[key],\n          value: unquote(value),\n          node,\n          key,\n          nodes,\n          children\n        }, 'value')\n      : typeof value === 'string' && unquote(value) || value\n\n  if(updatedVal === 'true') return true\n  if(updatedVal === 'false') return false\n  return updatedVal\n}\n\n// ----------- Run options methods ----------- //\nconst runAction = (args, def) => {\n  const { action, node, key, value, nodes, children } = args\n  \n  switch(typeof action){\n    case 'string':\n      return action || args[def]\n    case 'function':\n      return action({\n        0: node[0],\n        1: node[1],\n        2: node[2]\n      }, key, value, nodes, children, options) || args[def]\n      \n    case 'object':\n      let updateVal\n      // Get the tag type to be checked\n      const tagType = node[0]\n       if(!tagType) return args[def]\n      \n      // Get the node attrs if there are any\n      const nodeAttrs = node[1]\n      if(!nodeAttrs) return args[def]\n      \n      // Get the selector to check\n      const selector = action[tagType]\n      // if none, return the default\n      if(!selector) return args[def]\n      // Check if it's an all selector, if it is, set the value\n      updateVal = selector.all || null\n      const selectKeys = Object.keys(selector)\n\n      if(\n        // Check if there are more keys then just the all key\n        selector.all && selectKeys.length > 1 ||\n        // Check if there is no all key, but there are other keys\n        !selector.all  && selectKeys.length >= 1\n      ){\n        // return the default if it's not a select all and no attrs exist\n        if(!nodeAttrs) return args[def]\n        // Loop the slector and check if any of the elements attrs match\n        let setSelector\n        \n        Object.keys(selector).map(key => {\n          // If the updateVaule is already set or the key does not exist, stop checking\n          if(setSelector || (!nodeAttrs[key] && nodeAttrs[key] !== '')) return\n          \n          if(nodeAttrs[key] === \"true\" && !selector[key][nodeAttrs[key]] && selector[key]['']){\n            updateVal = selector[key]['']\n            setSelector = true\n          }\n          else if(selector[key][nodeAttrs[key]]){\n            updateVal = selector[key][nodeAttrs[key]]\n            setSelector = true\n          }\n        })\n      }\n\n      if(updateVal){\n        // If we should update, set the update based on type\n        if(typeof updateVal === 'string' || typeof updateVal === 'object') return updateVal\n        else if(typeof updateVal === 'function'){\n          return updateVal({\n            0: node[0],\n            1: node[1],\n            2: node[2]\n          }, key, value, nodes, children, options) || args[def]\n        }\n      }\n      // If we should not update the elment, return the default\n      return args[def]\n\n    default:\n      return action || args[def]\n  }\n}\n\n// ----------- Helpers ----------- //\nconst addAttribute = ({ node, attrs, nodes, children }) => {\n  Object.keys(selectorCheck.attrKeyAdd).map(key => {\n    const value = runAction({\n      action: selectorCheck.attrKeyAdd[key],\n      key,\n      node,\n      nodes,\n      children\n    })\n\n    if(value) attrs[key] = value\n  })\n\n  return attrs\n}\n\n\nconst filterFS = (node) => {\n  let start = ''\n  let end = ''\n  let text = node.content\n\n  if (node.type === 'comment') {\n    if(!options.comments) return null\n    start = '<!--'\n    end = '-->'\n  }\n  if (options.trim) {\n    return node.content.trim() !== '\\n' && node.content.replace(/\\s/g, '').length > 0\n      ? start + node.content.trim() + end\n      : null\n  }\n  return text\n    ? start + text + end\n    : null\n}\n\nconst allElementsCB = (block, parent, tree) => {\n  return typeof options.allElements === 'function'\n    ? options.allElements(block, parent, tree) || block\n    : block\n}\n\nexport const formatFS = (nodes, _options) => {\n  let rootFS = { ...options.root, ..._options.root }\n  options = { ...options, ..._options }\n\n  selectorCheck = setupSelectors(selectorCheck, options)\n  attrArrEmpty = Object.keys(options.attrKeyAdd).length === 0\n  \n  if(selectorCheck.tagConvert[rootFS[0]]){\n    rootFS = tagConvert({\n      action: selectorCheck.tagConvert[rootFS[0]],\n      block: rootFS,\n      value: rootFS[0],\n      node: rootFS,\n      children: nodes,\n      nodes,\n      rootFS,\n    })\n  }\n\n  rootFS[1] = formatAttributes({\n    attributes: rootFS[1],\n    node: rootFS,\n    children: nodes,\n    nodes\n  })\n\n  rootFS[2] = Array.isArray(rootFS[2])\n    ? rootFS[2].map(child => {\n        return convertBlock(child, rootFS, nodes, nodes, rootFS)\n      })\n    : []\n\n  const builtRoot = addChildren(rootFS, format({\n    childs: nodes,\n    parent: rootFS,\n    tree: rootFS,\n  }))\n\n  return allElementsCB(builtRoot, builtRoot, builtRoot)\n}", "/*\n  Tags which contain arbitary non-parsed content\n  For example: <script> JavaScript should not be parsed\n*/\nexport const childlessTags = ['style', 'script', 'template']\n\n/*\n  Tags which auto-close because they cannot be nested\n  For example: <p>Outer<p>Inner is <p>Outer</p><p>Inner</p>\n*/\nexport const closingTags = [\n  'html', 'head', 'body', 'p', 'dt', 'dd', 'li', 'option',\n  'thead', 'th', 'tbody', 'tr', 'td', 'tfoot', 'colgroup'\n]\n\n/*\n  Closing tags which have ancestor tags which\n  may exist within them which prevent the\n  closing tag from auto-closing.\n  For example: in <li><ul><li></ul></li>,\n  the top-level <li> should not auto-close.\n*/\nexport const closingTagAncestorBreakers = {\n  li: ['ul', 'ol', 'menu'],\n  dt: ['dl'],\n  dd: ['dl'],\n  tbody: ['table'],\n  thead: ['table'],\n  tfoot: ['table'],\n  tr: ['table'],\n  td: ['table']\n}\n\n/*\n  Tags which do not need the closing tag\n  For example: <img> does not need </img>\n*/\nexport const voidTags = [\n  '!doctype', 'area', 'base', 'br', 'col', 'command',\n  'embed', 'hr', 'img', 'input', 'keygen', 'link',\n  'meta', 'param', 'source', 'track', 'wbr'\n]\n", "import lexer from './lexer'\nimport parser from './parser'\nimport {toHTML} from './stringify'\nimport { formatFS } from './format'\n\nimport {\n  voidTags,\n  closingTags,\n  childlessTags,\n  closingTagAncestorBreakers\n} from './tags'\n\n\nexport const parseDefaults = {\n  voidTags,\n  closingTags,\n  childlessTags,\n  hasOpts: false,\n  includePositions: false,\n  closingTagAncestorBreakers,\n}\n\nexport function parse (str:String) {\n  let options = Object.assign({...parseDefaults}, arguments[1])\n  const tokens = lexer(str, options)\n  const nodes = parser(tokens, options)\n  return formatFS(nodes, options)\n}\n\nexport function stringify (ast:Record<any, any>) {\n  let options = {...parseDefaults}\n  options.hasOpts = false\n  if(arguments[1]){\n    options = Object.assign({...parseDefaults}, arguments[1])\n    options.hasOpts = true\n  }\n\n  return Array.isArray(ast)\n    ? toHTML(ast, options)\n    : toHTML([ast], options)\n}\n\n;(() => {\n  if(Boolean(typeof window !== 'undefined')){\n    // @ts-ignore\n    window.Symplasm = { parse, stringify, parseDefaults }\n  }\n})()"],
  "mappings": "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",
  "names": ["parse", "options", "childlessTags", "newWord", "key", "options", "options", "options", "options", "formatAttributes", "key", "parse", "options", "parse"]
}
