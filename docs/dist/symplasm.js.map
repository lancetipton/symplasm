{"version":3,"names":[],"mappings":"","sources":["symplasm.js"],"sourcesContent":["(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.symplasm = f()}})(function(){var define,module,exports;return (function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()({1:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.startsWith = startsWith;\nexports.endsWith = endsWith;\nexports.stringIncludes = stringIncludes;\nexports.isRealNaN = isRealNaN;\nexports.arrayIncludes = arrayIncludes;\n/*\n  We don't want to include babel-polyfill in our project.\n    - Library authors should be using babel-runtime for non-global polyfilling\n    - Adding babel-polyfill/-runtime increases bundle size significantly\n\n  We will include our polyfill instance methods as regular functions.\n*/\n\nfunction startsWith(str, searchString, position) {\n  return str.substr(position || 0, searchString.length) === searchString;\n}\n\nfunction endsWith(str, searchString, position) {\n  var index = (position || str.length) - searchString.length;\n  var lastIndex = str.lastIndexOf(searchString, index);\n  return lastIndex !== -1 && lastIndex === index;\n}\n\nfunction stringIncludes(str, searchString, position) {\n  return str.indexOf(searchString, position || 0) !== -1;\n}\n\nfunction isRealNaN(x) {\n  return typeof x === 'number' && isNaN(x);\n}\n\nfunction arrayIncludes(array, searchElement, position) {\n  var len = array.length;\n  if (len === 0) return false;\n\n  var lookupIndex = position | 0;\n  var isNaNElement = isRealNaN(searchElement);\n  var searchIndex = lookupIndex >= 0 ? lookupIndex : len + lookupIndex;\n  while (searchIndex < len) {\n    var element = array[searchIndex++];\n    if (element === searchElement) return true;\n    if (isNaNElement && isRealNaN(element)) return true;\n  }\n\n  return false;\n}\n\n},{}],2:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.formatFS = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _prop_map = require('./prop_map');\n\nvar _prop_map2 = _interopRequireDefault(_prop_map);\n\nvar _helpers = require('./helpers');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar options = {\n  root: {\n    0: 'div'\n  },\n  tagConvert: {},\n  attrKeyConvert: {},\n  attrValueConvert: {},\n  attrKeyAdd: {},\n  attrCamelCase: false,\n  trim: false,\n  lowerCaseTag: true,\n  comments: true\n};\n\nvar selectorCheck = {\n  tagConvert: {},\n  attrKeyConvert: {},\n  attrValueConvert: {},\n  attrKeyAdd: {}\n};\nvar attrArrEmpty = true;\nvar domTagAction = '$$DOM_TAG_NAME';\n\nvar convertBlock = function convertBlock(block, nodes, children) {\n  var data = selectorCheck.tagConvert[block[0]] ? runAction({\n    action: selectorCheck.tagConvert[block[0]],\n    node: block,\n    key: domTagAction,\n    value: block[0],\n    nodes: nodes,\n    children: children\n  }, 'value') : block[0];\n  if (typeof data === 'string') block[0] = data;\n  if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object') block = data;\n\n  block[1] = _typeof(block[1]) === 'object' ? Object.keys(block[1]).reduce(function (attrs, key) {\n    var useKey = selectorCheck.attrKeyConvert[key] ? runAction({\n      action: selectorCheck.attrKeyConvert[key],\n      node: block,\n      value: block[1][key],\n      key: key,\n      nodes: nodes,\n      children: children\n    }, 'key') : key;\n\n    useKey = options.attrCamelCase && _prop_map2.default[useKey] || useKey;\n\n    if (useKey && block[1][key]) {\n      attrs[useKey] = selectorCheck.attrValueConvert[key] ? runAction({\n        action: selectorCheck.attrValueConvert[key],\n        node: block,\n        value: block[1][key],\n        key: key,\n        nodes: nodes,\n        children: children\n      }, 'value') : typeof block[1][key] === 'string' ? (0, _helpers.unquote)(block[1][key]) : block[1][key];\n    }\n\n    return attrs;\n  }, {}) : {};\n\n  if (block[2] && typeof block[2] !== 'string' && block[2].length) {\n    block[2] = block[2].map(function (child) {\n      return convertBlock(child, nodes, children);\n    });\n  }\n\n  return block;\n};\n\nvar buildBlock = function buildBlock(org, added, nodes, children) {\n  org[0] = added[0];\n  org[1] = Object.assign({}, org[1], added[1]);\n  if (added[2]) org[2] = added[2];\n  return convertBlock(org, nodes, children);\n};\n\nvar tagConvert = function tagConvert(args) {\n  var action = args.action,\n      node = args.node,\n      value = args.value,\n      nodes = args.nodes,\n      children = args.children;\n  var block = args.block;\n\n\n  var tagName = node[0];\n  if (!tagName) return block;\n  block[0] = options.lowerCaseTag ? tagName.toLowerCase() : tagName;\n\n  if (typeof action === 'function') {\n    var data = runAction({\n      key: domTagAction,\n      value: block[0],\n      action: action,\n      node: node,\n      nodes: nodes,\n      children: children\n    }, 'value');\n    if (!data) return block;\n    if (typeof data === 'string') data = { 0: data };\n\n    if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object') block = buildBlock(block, data, nodes, children);\n  } else if ((typeof action === 'undefined' ? 'undefined' : _typeof(action)) === 'object' && !Array.isArray(action) && action[0]) {\n    block = buildBlock(block, action, nodes, children);\n  } else {\n    var _data = runAction({\n      key: domTagAction,\n      value: block[0],\n      action: action,\n      node: node,\n      nodes: nodes,\n      children: children\n    }, 'value');\n    if (typeof _data === 'string') block[0] = _data;\n    if ((typeof _data === 'undefined' ? 'undefined' : _typeof(_data)) === 'object') {\n      block = buildBlock(block, _data, nodes, children);\n    }\n  }\n  return block;\n};\n\n// ----------- Formatters ----------- //\nvar format = function format(args) {\n  var parent = args.parent,\n      children = args.children;\n  var childs = args.childs,\n      nodes = args.nodes;\n\n\n  return childs ? childs.reduce(function (children, node) {\n    nodes = nodes || childs;\n    var child = node.type === 'text' || node.type === 'comment' ? filterFS(node, parent) : formatNode(node, childs, nodes, children);\n    child && children.push(child);\n    return children;\n  }, []) : [];\n};\n\nvar formatNode = function formatNode(node, nodes, children) {\n  var block = selectorCheck.tagConvert[node[0]] ? tagConvert({\n    action: selectorCheck.tagConvert[node[0]],\n    block: {},\n    value: node[0],\n    node: node,\n    nodes: nodes,\n    children: children\n  }) : { 0: node[0]\n\n    // Build any of the current attrs\n  };var attrs = formatAttributes({\n    attributes: node[1],\n    node: node,\n    nodes: nodes,\n    children: children\n  });\n\n  // current attr data get merge after the data from the node\n  // This is because the only way the block will have attrs is if it was tagConverted\n  block[1] = Object.assign({}, attrs, block[1]);\n\n  var childs = format({\n    childs: node[2],\n    parent: block,\n    nodes: nodes,\n    children: children\n  });\n  return (0, _helpers.addChildren)(block, childs);\n};\n\nvar formatAttributes = function formatAttributes(args) {\n  var node = args.node,\n      nodes = args.nodes,\n      children = args.children;\n  var attributes = args.attributes;\n\n  attributes = attributes || {};\n  var attrs = {};\n\n  Object.keys(attributes).map(function (item) {\n    var parts = [item, attributes[item]];\n\n    if (selectorCheck.attrKeyConvert[parts[0]] === null) return;\n\n    var key = selectorCheck.attrKeyConvert[parts[0]] ? runAction({\n      action: selectorCheck.attrKeyConvert[parts[0]],\n      key: parts[0],\n      value: parts[1],\n      node: node,\n      nodes: nodes,\n      children: children\n    }, 'key') : parts[0];\n\n    key = options.attrCamelCase && _prop_map2.default[key] || key;\n\n    var value = typeof parts[1] === 'string' || _typeof(parts[1]) === 'object' ? formatValue({\n      key: parts[0],\n      value: parts[1],\n      node: node,\n      nodes: nodes,\n      children: children\n    }) : null;\n\n    if (key) {\n      if ((key === 'className' || key === 'class') && value === '') attrs[key] = '';\n      if (key === 'id' && !value) return;\n      attrs[key] = value || value === false ? value : true;\n    }\n  });\n\n  if (attrArrEmpty) return attrs;\n\n  return addAttribute({\n    node: node,\n    attrs: attrs,\n    nodes: nodes,\n    children: children\n  });\n};\n\nvar formatValue = function formatValue(args) {\n  var node = args.node,\n      key = args.key,\n      value = args.value,\n      nodes = args.nodes,\n      children = args.children;\n\n  var updatedVal = key === 'style' && typeof value === 'string' ? (0, _helpers.convertStyle)((0, _helpers.unquote)(value)) : selectorCheck.attrValueConvert[key] ? runAction({\n    action: selectorCheck.attrValueConvert[key],\n    value: (0, _helpers.unquote)(value),\n    node: node,\n    key: key,\n    nodes: nodes,\n    children: children\n  }, 'value') : typeof value === 'string' && (0, _helpers.unquote)(value) || value;\n\n  if (updatedVal === 'true') return true;\n  if (updatedVal === 'false') return false;\n  return updatedVal;\n};\n\n// ----------- Run options methods ----------- //\nvar runAction = function runAction(args, def) {\n  var action = args.action,\n      node = args.node,\n      key = args.key,\n      value = args.value,\n      nodes = args.nodes,\n      children = args.children;\n\n\n  switch (typeof action === 'undefined' ? 'undefined' : _typeof(action)) {\n    case 'string':\n      return action || args[def];\n    case 'function':\n      return action({\n        0: node[0],\n        1: node[1],\n        2: node[2]\n      }, key, value, nodes, children, options) || args[def];\n\n    case 'object':\n      var updateVal = void 0;\n      // Get the tag type to be checked\n      var tagType = node[0];\n      if (!tagType) return args[def];\n\n      // Get the node attrs if there are any\n      var nodeAttrs = node[1];\n      if (!nodeAttrs) return args[def];\n\n      // Get the selector to check\n      var selector = action[tagType];\n      // if none, return the default\n      if (!selector) return args[def];\n      // Check if it's an all selector, if it is, set the value\n      updateVal = selector.all || null;\n      var selectKeys = Object.keys(selector);\n\n      if (\n      // Check if there are more keys then just the all key\n      selector.all && selectKeys.length > 1 ||\n      // Check if there is no all key, but there are other keys\n      !selector.all && selectKeys.length >= 1) {\n        // return the default if it's not a select all and no attrs exist\n        if (!nodeAttrs) return args[def];\n        // Loop the slector and check if any of the elements attrs match\n        var setSelector = void 0;\n\n        Object.keys(selector).map(function (key) {\n          // If the updateVaule is already set or the key does not exist, stop checking\n          if (setSelector || !nodeAttrs[key] && nodeAttrs[key] !== '') return;\n\n          if (nodeAttrs[key] === \"true\" && !selector[key][nodeAttrs[key]] && selector[key]['']) {\n            updateVal = selector[key][''];\n            setSelector = true;\n          } else if (selector[key][nodeAttrs[key]]) {\n            updateVal = selector[key][nodeAttrs[key]];\n            setSelector = true;\n          }\n        });\n      }\n\n      if (updateVal) {\n        // If we should update, set the update based on type\n        if (typeof updateVal === 'string' || (typeof updateVal === 'undefined' ? 'undefined' : _typeof(updateVal)) === 'object') return updateVal;else if (typeof updateVal === 'function') {\n          return updateVal({\n            0: node[0],\n            1: node[1],\n            2: node[2]\n          }, key, value, nodes, children, options) || args[def];\n        }\n      }\n      // If we should not update the elment, return the default\n      return args[def];\n\n    default:\n      return action || args[def];\n  }\n};\n\n// ----------- Helpers ----------- //\nvar addAttribute = function addAttribute(args) {\n  var node = args.node,\n      attrs = args.attrs,\n      nodes = args.nodes,\n      children = args.children;\n\n\n  Object.keys(selectorCheck.attrKeyAdd).map(function (key) {\n    var value = runAction({\n      action: selectorCheck.attrKeyAdd[key],\n      key: key,\n      node: node,\n      nodes: nodes,\n      children: children\n    });\n\n    if (value) attrs[key] = value;\n  });\n\n  return attrs;\n};\n\nvar filterFS = function filterFS(node) {\n  var start = '';\n  var end = '';\n  var text = node.content;\n\n  if (node.type === 'comment') {\n    if (!options.comments) return null;\n    start = '<!--';\n    end = '-->';\n  }\n  if (options.trim) {\n    return node.content.trim() !== '\\n' && node.content.replace(/\\s/g, '').length > 0 ? start + node.content.trim() + end : null;\n  }\n  return text ? start + text + end : null;\n};\n\nvar formatFS = exports.formatFS = function formatFS(nodes, _options) {\n  var rootFS = Object.assign({}, options.root, _options.root);\n  Object.assign(options, _options);\n  selectorCheck = (0, _helpers.setupSelectors)(selectorCheck, options);\n  attrArrEmpty = Object.keys(options.attrKeyAdd).length === 0;\n\n  if (selectorCheck.tagConvert[rootFS[0]]) {\n    rootFS = tagConvert({\n      action: selectorCheck.tagConvert[rootFS[0]],\n      block: rootFS,\n      value: rootFS[0],\n      node: rootFS,\n      children: nodes,\n      nodes: nodes\n    });\n  }\n  rootFS[1] = formatAttributes({\n    attributes: rootFS[1],\n    node: rootFS,\n    children: nodes,\n    nodes: nodes\n  });\n\n  rootFS[2] = Array.isArray(rootFS[2]) ? rootFS[2].map(function (child) {\n    return convertBlock(child, nodes, nodes);\n  }) : [];\n\n  return (0, _helpers.addChildren)(rootFS, format({\n    childs: nodes,\n    parent: rootFS\n  }));\n};\n\n},{\"./helpers\":3,\"./prop_map\":7}],3:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar selectTypes = [['class', '.'], ['id', '#'], ['data', '[']];\n\nvar addChildren = function addChildren(block, childs) {\n  var addChilds = childs.length === 1 && typeof childs[0] === 'string' ? childs[0] : childs.length && childs || null;\n\n  if (addChilds) {\n    if (!block[2]) block[2] = addChilds;else if (Array.isArray(block[2])) block[2] = block[2].concat(addChilds);else block[2] = [block[2]].concat(addChilds);\n  }\n  return block;\n};\n\nvar convertCase = function convertCase(text) {\n  var converted = '';\n  var text_split = text.split('-');\n  if (!text_split.length) return text;\n  converted += text_split.shift();\n  text_split.map(function (val) {\n    converted += val.charAt(0).toUpperCase() + val.slice(1);\n  });\n  return converted;\n};\n\nvar convertStyle = function convertStyle(styles) {\n  var valObj = {};\n  var val_split = styles.trim().split(';');\n\n  Array.isArray(val_split) && val_split[0].trim() !== '' && val_split.map(function (item) {\n    if (item.indexOf(':') !== -1) {\n      var item_split = item.split(':');\n      if (Array.isArray(item_split) && item_split.length === 2) {\n        if (item_split[0].trim() !== '' && item_split[1].trim() !== '') {\n          valObj[convertCase(item_split[0].trim())] = item_split[1].trim();\n        }\n      }\n    }\n  });\n\n  return valObj;\n};\n\nvar setupSelectors = function setupSelectors(selectorCheck, options) {\n  var selectorArr = Object.keys(selectorCheck);\n  Object.keys(options).map(function (key) {\n    // Only check keys from the selector Array\n    if (selectorArr.indexOf(key) === -1) return;\n\n    var props = {};\n    Object.keys(options[key]).map(function (attr) {\n      // Get the attribute to be checked - i.e. class / id / name\n      var attribute = options[key][attr];\n\n      // Get the element selectors,\n      var elementSelectors = attribute && attribute.selector;\n\n      if (key !== 'tagConvert') {\n        // If it's just a string set it, and return\n        // This means all items should be coverted\n        // i.e. class='className'\n        if (typeof attribute === 'string' || typeof attribute === 'function') {\n          selectorCheck[key][attr] = attribute;\n          return;\n        }\n\n        // If there's no selectors, loop the attribute and add the keys \n        // to the elementSelector\n        if (attribute && !elementSelectors && Object.keys(attribute).length) {\n          elementSelectors = {};\n          Object.keys(attribute).map(function (key) {\n            elementSelectors[key] = attribute[key];\n          });\n        }\n\n        if (!elementSelectors) {\n          if (attribute === null) selectorCheck[key][attr] = null;\n          return;\n        }\n        // Set the default for the selectorCheck items\n        selectorCheck[key][attr] = selectorCheck[key][attr] || {};\n      } else {\n        elementSelectors = {};\n        elementSelectors[attr] = attribute;\n      }\n\n      // chache selector type\n      var isArr = Array.isArray(elementSelectors);\n      // check that is has a value to return\n      if (isArr) {\n        // If it's an array and there is no value, we have no way to conver the items\n        // So just return\n        if (!options[key][attr].value) return;\n        // Otherwise set the items\n        selectorCheck[key][attr].value = options[key][attr].value;\n      }\n\n      Object.keys(elementSelectors).map(function (select) {\n        // Selector tags - i.e. input.class / button#primary / select[td-select]\n        var tags = isArr && elementSelectors[select] || select;\n        // split all tags if more then 1\n        var allTags = tags.split(',');\n        // loop tags and split on selector type - i.e. class / id / name\n        allTags.map(function (_tag) {\n          var tag = clean(_tag);\n          var el = void 0;\n\n          var hasSelectors = [];\n          // Loop selector types and add to select checker\n          // This checks for a class / id / attribute on the select item\n          selectTypes.map(function (type) {\n            // If it has the passed in type in the string convert it, and add the the props\n            if (tag.indexOf(type[1]) !== -1) {\n              var split = tag.split(type[1]);\n              if (type[0] === 'data') {\n                var dataSplit = split[1].split('=');\n                var _key = clean(dataSplit[0].replace(']', ''));\n                var dataKey = dataSplit[1] && clean(dataSplit[1].replace(']', '')) || '';\n                props[_key] = Object.assign({}, props[_key], _defineProperty({}, dataKey, elementSelectors[select]));\n              } else {\n                props[type[0]] = Object.assign({}, props[type[0]], _defineProperty({}, clean(split[1]), elementSelectors[select]));\n              }\n\n              el = clean(split[0]);\n              if (el.indexOf('.') !== -1 || el.indexOf('#') !== -1 || el.indexOf('[') !== -1) {\n                console.warn('Error: \"' + el + '\" is not formatted correctly. It contains one of \". # [\"');\n              }\n              // Update that we have a select type on the selector\n              hasSelectors.push(true);\n            }\n          });\n\n          // Check if a select type was found on the selector\n          // This will be an array of true if it had a select type on it\n          // If no class / id / attribute was found on the selector, it will be an empty array\n          // ------------------ ELEMENT WITH A SELECTOR ------------------ //\n          if (hasSelectors.indexOf(true) !== -1) {\n            var loc = key !== 'tagConvert' ? attr : el;\n            selectorCheck[key] = selectorCheck[key] || {};\n            selectorCheck[key][loc] = selectorCheck[key][loc] || {};\n            selectorCheck[key][loc][el] = Object.assign({}, selectorCheck[key][loc][el], props);\n          }\n          // ------------------ ALL OF ELEMENT TYPE ------------------ //\n          else {\n              var _loc = key !== 'tagConvert' ? attr : tag;\n\n              selectorCheck[key] = selectorCheck[key] || {};\n              selectorCheck[key][_loc] = selectorCheck[key][_loc] || {};\n              selectorCheck[key][_loc][tag] = selectorCheck[key][_loc][tag] || {};\n              selectorCheck[key][_loc][tag].all = elementSelectors[select];\n            }\n        });\n      });\n    });\n  });\n\n  return selectorCheck;\n};\n\nvar splitKeyValue = function splitKeyValue(str, sep) {\n  var idx = str.indexOf(sep);\n  if (idx === -1) return [str];\n  return [str.slice(0, idx), str.slice(idx + sep.length)];\n};\n\nvar clean = function clean(str) {\n  return str && unquote(str.trim()).trim() || '';\n};\n\nvar unquote = function unquote(str) {\n  var car = str.charAt(0);\n  var end = str.length - 1;\n  var isQuoteStart = car === '\"' || car === \"'\";\n  if (isQuoteStart && car === str.charAt(end)) {\n    return str.slice(1, end);\n  }\n  return str;\n};\n\nexports.addChildren = addChildren;\nexports.convertCase = convertCase;\nexports.convertStyle = convertStyle;\nexports.setupSelectors = setupSelectors;\nexports.splitKeyValue = splitKeyValue;\nexports.unquote = unquote;\n\n},{}],4:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseDefaults = undefined;\nexports.parse = parse;\nexports.stringify = stringify;\n\nvar _lexer = require('./lexer');\n\nvar _lexer2 = _interopRequireDefault(_lexer);\n\nvar _parser = require('./parser');\n\nvar _parser2 = _interopRequireDefault(_parser);\n\nvar _stringify = require('./stringify');\n\nvar _format = require('./format');\n\nvar _tags = require('./tags');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar parseDefaults = exports.parseDefaults = {\n  voidTags: _tags.voidTags,\n  closingTags: _tags.closingTags,\n  childlessTags: _tags.childlessTags,\n  closingTagAncestorBreakers: _tags.closingTagAncestorBreakers,\n  includePositions: false\n};\n\nfunction parse(str) {\n  var options = Object.assign(parseDefaults, arguments[1]);\n  var tokens = (0, _lexer2.default)(str, options);\n  var nodes = (0, _parser2.default)(tokens, options);\n  return (0, _format.formatFS)(nodes, options);\n}\n\nfunction stringify(ast) {\n  var options = parseDefaults;\n  options.hasOpts = false;\n  if (arguments[1]) {\n    options = Object.assign(parseDefaults, arguments[1]);\n    options.hasOpts = true;\n  }\n\n  return Array.isArray(ast) ? (0, _stringify.toHTML)(ast, options) : (0, _stringify.toHTML)([ast], options);\n}\n\n},{\"./format\":2,\"./lexer\":5,\"./parser\":6,\"./stringify\":9,\"./tags\":10}],5:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.feedPosition = feedPosition;\nexports.jumpPosition = jumpPosition;\nexports.makeInitialPosition = makeInitialPosition;\nexports.copyPosition = copyPosition;\nexports.default = lexer;\nexports.lex = lex;\nexports.findTextEnd = findTextEnd;\nexports.lexText = lexText;\nexports.lexComment = lexComment;\nexports.lexTag = lexTag;\nexports.isWhitespaceChar = isWhitespaceChar;\nexports.lexTagName = lexTagName;\nexports.lexTagAttributes = lexTagAttributes;\nexports.lexSkipTag = lexSkipTag;\n\nvar _compat = require('./compat');\n\nfunction feedPosition(position, str, len) {\n  var start = position.index;\n  var end = position.index = start + len;\n  for (var i = start; i < end; i++) {\n    var char = str.charAt(i);\n    if (char === '\\n') {\n      position.line++;\n      position.column = 0;\n    } else {\n      position.column++;\n    }\n  }\n}\n\nfunction jumpPosition(position, str, end) {\n  var len = end - position.index;\n  return feedPosition(position, str, len);\n}\n\nfunction makeInitialPosition() {\n  return {\n    index: 0,\n    column: 0,\n    line: 0\n  };\n}\n\nfunction copyPosition(position) {\n  return {\n    index: position.index,\n    line: position.line,\n    column: position.column\n  };\n}\n\nfunction lexer(str, options) {\n  var state = {\n    str: str,\n    options: options,\n    position: makeInitialPosition(),\n    tokens: []\n  };\n  lex(state);\n  return state.tokens;\n}\n\nfunction lex(state) {\n  var str = state.str,\n      childlessTags = state.options.childlessTags;\n\n  var len = str.length;\n  while (state.position.index < len) {\n    var start = state.position.index;\n    lexText(state);\n    if (state.position.index === start) {\n      var isComment = (0, _compat.startsWith)(str, '!--', start + 1);\n      if (isComment) {\n        lexComment(state);\n      } else {\n        var tagName = lexTag(state);\n        var safeTag = tagName.toLowerCase();\n        if ((0, _compat.arrayIncludes)(childlessTags, safeTag)) {\n          lexSkipTag(tagName, state);\n        }\n      }\n    }\n  }\n}\n\nvar alphanumeric = /[A-Za-z0-9]/;\nfunction findTextEnd(str, index) {\n  while (true) {\n    var textEnd = str.indexOf('<', index);\n    if (textEnd === -1) {\n      return textEnd;\n    }\n    var char = str.charAt(textEnd + 1);\n    if (char === '/' || char === '!' || alphanumeric.test(char)) {\n      return textEnd;\n    }\n    index = textEnd + 1;\n  }\n}\n\nfunction lexText(state) {\n  var type = 'text';\n  var str = state.str,\n      position = state.position;\n\n  var textEnd = findTextEnd(str, position.index);\n  if (textEnd === position.index) return;\n  if (textEnd === -1) {\n    textEnd = str.length;\n  }\n\n  var start = copyPosition(position);\n  var content = str.slice(position.index, textEnd);\n  jumpPosition(position, str, textEnd);\n  var end = copyPosition(position);\n  state.tokens.push({ type: type, content: content, position: { start: start, end: end } });\n}\n\nfunction lexComment(state) {\n  var str = state.str,\n      position = state.position;\n\n  var start = copyPosition(position);\n  feedPosition(position, str, 4); // \"<!--\".length\n  var contentEnd = str.indexOf('-->', position.index);\n  var commentEnd = contentEnd + 3; // \"-->\".length\n  if (contentEnd === -1) {\n    contentEnd = commentEnd = str.length;\n  }\n\n  var content = str.slice(position.index, contentEnd);\n  jumpPosition(position, str, commentEnd);\n  state.tokens.push({\n    type: 'comment',\n    content: content,\n    position: {\n      start: start,\n      end: copyPosition(position)\n    }\n  });\n}\n\nfunction lexTag(state) {\n  var str = state.str,\n      position = state.position;\n\n  {\n    var secondChar = str.charAt(position.index + 1);\n    var close = secondChar === '/';\n    var start = copyPosition(position);\n    feedPosition(position, str, close ? 2 : 1);\n    state.tokens.push({ type: 'tag-start', close: close, position: { start: start } });\n  }\n  var tagName = lexTagName(state);\n  lexTagAttributes(state);\n  {\n    var firstChar = str.charAt(position.index);\n    var _close = firstChar === '/';\n    feedPosition(position, str, _close ? 2 : 1);\n    var end = copyPosition(position);\n    state.tokens.push({ type: 'tag-end', close: _close, position: { end: end } });\n  }\n  return tagName;\n}\n\n// See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#special-white-space\nvar whitespace = /\\s/;\nfunction isWhitespaceChar(char) {\n  return whitespace.test(char);\n}\n\nfunction lexTagName(state) {\n  var str = state.str,\n      position = state.position;\n\n  var len = str.length;\n  var start = position.index;\n  while (start < len) {\n    var char = str.charAt(start);\n    var isTagChar = !(isWhitespaceChar(char) || char === '/' || char === '>');\n    if (isTagChar) break;\n    start++;\n  }\n\n  var end = start + 1;\n  while (end < len) {\n    var _char = str.charAt(end);\n    var _isTagChar = !(isWhitespaceChar(_char) || _char === '/' || _char === '>');\n    if (!_isTagChar) break;\n    end++;\n  }\n\n  jumpPosition(position, str, end);\n  var tagName = str.slice(start, end);\n  state.tokens.push({\n    type: 'tag',\n    content: tagName\n  });\n  return tagName;\n}\n\nfunction lexTagAttributes(state) {\n  var str = state.str,\n      position = state.position,\n      tokens = state.tokens;\n\n  var cursor = position.index;\n  var quote = null; // null, single-, or double-quote\n  var wordBegin = cursor; // index of word start\n  var words = []; // \"key\", \"key=value\", \"key='value'\", etc\n  var len = str.length;\n  while (cursor < len) {\n    var char = str.charAt(cursor);\n    if (quote) {\n      var isQuoteEnd = char === quote;\n      if (isQuoteEnd) {\n        quote = null;\n      }\n      cursor++;\n      continue;\n    }\n\n    var isTagEnd = char === '/' || char === '>';\n    if (isTagEnd) {\n      if (cursor !== wordBegin) {\n        words.push(str.slice(wordBegin, cursor));\n      }\n      break;\n    }\n\n    var isWordEnd = isWhitespaceChar(char);\n    if (isWordEnd) {\n      if (cursor !== wordBegin) {\n        words.push(str.slice(wordBegin, cursor));\n      }\n      wordBegin = cursor + 1;\n      cursor++;\n      continue;\n    }\n\n    var isQuoteStart = char === '\\'' || char === '\"';\n    if (isQuoteStart) {\n      quote = char;\n      cursor++;\n      continue;\n    }\n\n    cursor++;\n  }\n  jumpPosition(position, str, cursor);\n\n  var wLen = words.length;\n  var type = 'attribute';\n  for (var i = 0; i < wLen; i++) {\n    var word = words[i];\n    var isNotPair = word.indexOf('=') === -1;\n    if (isNotPair) {\n      var secondWord = words[i + 1];\n      if (secondWord && (0, _compat.startsWith)(secondWord, '=')) {\n        if (secondWord.length > 1) {\n          var newWord = word + secondWord;\n          tokens.push({ type: type, content: newWord });\n          i += 1;\n          continue;\n        }\n        var thirdWord = words[i + 2];\n        i += 1;\n        if (thirdWord) {\n          var _newWord = word + '=' + thirdWord;\n          tokens.push({ type: type, content: _newWord });\n          i += 1;\n          continue;\n        }\n      }\n    }\n    if ((0, _compat.endsWith)(word, '=')) {\n      var _secondWord = words[i + 1];\n      if (_secondWord && !(0, _compat.stringIncludes)(_secondWord, '=')) {\n        var _newWord3 = word + _secondWord;\n        tokens.push({ type: type, content: _newWord3 });\n        i += 1;\n        continue;\n      }\n\n      var _newWord2 = word.slice(0, -1);\n      tokens.push({ type: type, content: _newWord2 });\n      continue;\n    }\n\n    tokens.push({ type: type, content: word });\n  }\n}\n\nvar push = [].push;\n\nfunction lexSkipTag(tagName, state) {\n  var str = state.str,\n      position = state.position,\n      tokens = state.tokens;\n\n  var safeTagName = tagName.toLowerCase();\n  var len = str.length;\n  var index = position.index;\n  while (index < len) {\n    var nextTag = str.indexOf('</', index);\n    if (nextTag === -1) {\n      lexText(state);\n      break;\n    }\n\n    var tagStartPosition = copyPosition(position);\n    jumpPosition(tagStartPosition, str, nextTag);\n    var tagState = { str: str, position: tagStartPosition, tokens: [] };\n    var name = lexTag(tagState);\n    if (safeTagName !== name.toLowerCase()) {\n      index = tagState.position.index;\n      continue;\n    }\n\n    if (nextTag !== position.index) {\n      var textStart = copyPosition(position);\n      jumpPosition(position, str, nextTag);\n      tokens.push({\n        type: 'text',\n        content: str.slice(textStart.index, nextTag),\n        position: {\n          start: textStart,\n          end: copyPosition(position)\n        }\n      });\n    }\n\n    push.apply(tokens, tagState.tokens);\n    jumpPosition(position, str, tagState.position.index);\n    break;\n  }\n}\n\n},{\"./compat\":1}],6:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = parser;\nexports.hasTerminalParent = hasTerminalParent;\nexports.parse = parse;\n\nvar _compat = require('./compat');\n\nvar _helpers = require('./helpers');\n\nfunction parser(tokens, options) {\n  var root = { tagName: null, children: [] };\n  var state = { tokens: tokens, options: options, cursor: 0, stack: [root] };\n  parse(state);\n  return root.children;\n}\n\nfunction hasTerminalParent(tagName, stack, terminals) {\n  var tagParents = terminals[tagName];\n  if (tagParents) {\n    var currentIndex = stack.length - 1;\n    while (currentIndex >= 0) {\n      var parentTagName = stack[currentIndex].tagName;\n      if (parentTagName === tagName) {\n        break;\n      }\n      if ((0, _compat.arrayIncludes)(tagParents, parentTagName)) {\n        return true;\n      }\n      currentIndex--;\n    }\n  }\n  return false;\n}\n\nfunction parse(state) {\n  var tokens = state.tokens,\n      options = state.options;\n  var stack = state.stack;\n\n  var nodes = stack[stack.length - 1].children;\n  var len = tokens.length;\n  var cursor = state.cursor;\n\n  while (cursor < len) {\n    var token = tokens[cursor];\n    if (token.type !== 'tag-start') {\n      nodes.push(token);\n      cursor++;\n      continue;\n    }\n\n    var tagToken = tokens[++cursor];\n    cursor++;\n    var tagName = tagToken.content.toLowerCase();\n    if (token.close) {\n      var index = stack.length;\n      var didRewind = false;\n      while (--index > -1) {\n        if (stack[index].tagName === tagName) {\n          stack.splice(index);\n          didRewind = true;\n          break;\n        }\n      }\n      while (cursor < len) {\n        var endToken = tokens[cursor];\n        if (endToken.type !== 'tag-end') break;\n        cursor++;\n      }\n      if (didRewind) {\n        break;\n      } else {\n        continue;\n      }\n    }\n\n    var isClosingTag = (0, _compat.arrayIncludes)(options.closingTags, tagName);\n    var shouldRewindToAutoClose = isClosingTag;\n    if (shouldRewindToAutoClose) {\n      var terminals = options.closingTagAncestorBreakers;\n\n      shouldRewindToAutoClose = !hasTerminalParent(tagName, stack, terminals);\n    }\n\n    if (shouldRewindToAutoClose) {\n      // rewind the stack to just above the previous\n      // closing tag of the same name\n      var currentIndex = stack.length - 1;\n      while (currentIndex > 0) {\n        if (tagName === stack[currentIndex].tagName) {\n          stack = stack.slice(0, currentIndex);\n          var previousIndex = currentIndex - 1;\n          nodes = stack[previousIndex].children;\n          break;\n        }\n        currentIndex = currentIndex - 1;\n      }\n    }\n\n    var attributes = [];\n    var attrToken = void 0;\n    while (cursor < len) {\n      attrToken = tokens[cursor];\n      if (attrToken.type === 'tag-end') break;\n      attributes.push(attrToken.content);\n      cursor++;\n    }\n\n    cursor++;\n    var children = [];\n\n    attributes = Array.isArray(attributes) && attributes.length ? attributes.reduce(function (attrs, attr) {\n      var parts = (0, _helpers.splitKeyValue)(attr, '=');\n      attrs[parts[0]] = parts[1] && (0, _helpers.unquote)(parts[1]) || '';\n      return attrs;\n    }, {}) : {};\n\n    nodes.push({\n      0: tagToken.content,\n      1: attributes,\n      2: children\n    });\n\n    var hasChildren = !(attrToken.close || (0, _compat.arrayIncludes)(options.voidTags, tagName));\n    if (hasChildren) {\n      stack.push({ tagName: tagName, children: children });\n      var innerState = { tokens: tokens, options: options, cursor: cursor, stack: stack };\n      parse(innerState);\n      cursor = innerState.cursor;\n    }\n  }\n  state.cursor = cursor;\n}\n\n},{\"./compat\":1,\"./helpers\":3}],7:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar possibleStandardNames = {\n  // HTML\n  accept: 'accept',\n  acceptcharset: 'acceptCharset',\n  'accept-charset': 'acceptCharset',\n  accesskey: 'accessKey',\n  action: 'action',\n  allowfullscreen: 'allowFullScreen',\n  alt: 'alt',\n  as: 'as',\n  async: 'async',\n  autocapitalize: 'autoCapitalize',\n  autocomplete: 'autoComplete',\n  autocorrect: 'autoCorrect',\n  autofocus: 'autoFocus',\n  autoplay: 'autoPlay',\n  autosave: 'autoSave',\n  capture: 'capture',\n  cellpadding: 'cellPadding',\n  cellspacing: 'cellSpacing',\n  challenge: 'challenge',\n  charset: 'charSet',\n  checked: 'checked',\n  children: 'children',\n  cite: 'cite',\n  class: 'className',\n  classid: 'classID',\n  classname: 'className',\n  cols: 'cols',\n  colspan: 'colSpan',\n  content: 'content',\n  contenteditable: 'contentEditable',\n  contextmenu: 'contextMenu',\n  controls: 'controls',\n  controlslist: 'controlsList',\n  coords: 'coords',\n  crossorigin: 'crossOrigin',\n  dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',\n  data: 'data',\n  datetime: 'dateTime',\n  default: 'default',\n  defaultchecked: 'defaultChecked',\n  defaultvalue: 'defaultValue',\n  defer: 'defer',\n  dir: 'dir',\n  disabled: 'disabled',\n  download: 'download',\n  draggable: 'draggable',\n  enctype: 'encType',\n  for: 'htmlFor',\n  form: 'form',\n  formmethod: 'formMethod',\n  formaction: 'formAction',\n  formenctype: 'formEncType',\n  formnovalidate: 'formNoValidate',\n  formtarget: 'formTarget',\n  frameborder: 'frameBorder',\n  headers: 'headers',\n  height: 'height',\n  hidden: 'hidden',\n  high: 'high',\n  href: 'href',\n  hreflang: 'hrefLang',\n  htmlfor: 'htmlFor',\n  httpequiv: 'httpEquiv',\n  'http-equiv': 'httpEquiv',\n  icon: 'icon',\n  id: 'id',\n  innerhtml: 'innerHTML',\n  inputmode: 'inputMode',\n  integrity: 'integrity',\n  is: 'is',\n  itemid: 'itemID',\n  itemprop: 'itemProp',\n  itemref: 'itemRef',\n  itemscope: 'itemScope',\n  itemtype: 'itemType',\n  keyparams: 'keyParams',\n  keytype: 'keyType',\n  kind: 'kind',\n  label: 'label',\n  lang: 'lang',\n  list: 'list',\n  loop: 'loop',\n  low: 'low',\n  manifest: 'manifest',\n  marginwidth: 'marginWidth',\n  marginheight: 'marginHeight',\n  max: 'max',\n  maxlength: 'maxLength',\n  media: 'media',\n  mediagroup: 'mediaGroup',\n  method: 'method',\n  min: 'min',\n  minlength: 'minLength',\n  multiple: 'multiple',\n  muted: 'muted',\n  name: 'name',\n  nomodule: 'noModule',\n  nonce: 'nonce',\n  novalidate: 'noValidate',\n  open: 'open',\n  optimum: 'optimum',\n  pattern: 'pattern',\n  placeholder: 'placeholder',\n  playsinline: 'playsInline',\n  poster: 'poster',\n  preload: 'preload',\n  profile: 'profile',\n  radiogroup: 'radioGroup',\n  readonly: 'readOnly',\n  referrerpolicy: 'referrerPolicy',\n  rel: 'rel',\n  required: 'required',\n  reversed: 'reversed',\n  role: 'role',\n  rows: 'rows',\n  rowspan: 'rowSpan',\n  sandbox: 'sandbox',\n  scope: 'scope',\n  scoped: 'scoped',\n  scrolling: 'scrolling',\n  seamless: 'seamless',\n  selected: 'selected',\n  shape: 'shape',\n  size: 'size',\n  sizes: 'sizes',\n  span: 'span',\n  spellcheck: 'spellCheck',\n  src: 'src',\n  srcdoc: 'srcDoc',\n  srclang: 'srcLang',\n  srcset: 'srcSet',\n  start: 'start',\n  step: 'step',\n  style: 'style',\n  summary: 'summary',\n  tabindex: 'tabIndex',\n  target: 'target',\n  title: 'title',\n  type: 'type',\n  usemap: 'useMap',\n  value: 'value',\n  width: 'width',\n  wmode: 'wmode',\n  wrap: 'wrap',\n\n  // SVG\n  about: 'about',\n  accentheight: 'accentHeight',\n  'accent-height': 'accentHeight',\n  accumulate: 'accumulate',\n  additive: 'additive',\n  alignmentbaseline: 'alignmentBaseline',\n  'alignment-baseline': 'alignmentBaseline',\n  allowreorder: 'allowReorder',\n  alphabetic: 'alphabetic',\n  amplitude: 'amplitude',\n  arabicform: 'arabicForm',\n  'arabic-form': 'arabicForm',\n  ascent: 'ascent',\n  attributename: 'attributeName',\n  attributetype: 'attributeType',\n  autoreverse: 'autoReverse',\n  azimuth: 'azimuth',\n  basefrequency: 'baseFrequency',\n  baselineshift: 'baselineShift',\n  'baseline-shift': 'baselineShift',\n  baseprofile: 'baseProfile',\n  bbox: 'bbox',\n  begin: 'begin',\n  bias: 'bias',\n  by: 'by',\n  calcmode: 'calcMode',\n  capheight: 'capHeight',\n  'cap-height': 'capHeight',\n  clip: 'clip',\n  clippath: 'clipPath',\n  'clip-path': 'clipPath',\n  clippathunits: 'clipPathUnits',\n  cliprule: 'clipRule',\n  'clip-rule': 'clipRule',\n  color: 'color',\n  colorinterpolation: 'colorInterpolation',\n  'color-interpolation': 'colorInterpolation',\n  colorinterpolationfilters: 'colorInterpolationFilters',\n  'color-interpolation-filters': 'colorInterpolationFilters',\n  colorprofile: 'colorProfile',\n  'color-profile': 'colorProfile',\n  colorrendering: 'colorRendering',\n  'color-rendering': 'colorRendering',\n  contentscripttype: 'contentScriptType',\n  contentstyletype: 'contentStyleType',\n  cursor: 'cursor',\n  cx: 'cx',\n  cy: 'cy',\n  d: 'd',\n  datatype: 'datatype',\n  decelerate: 'decelerate',\n  descent: 'descent',\n  diffuseconstant: 'diffuseConstant',\n  direction: 'direction',\n  display: 'display',\n  divisor: 'divisor',\n  dominantbaseline: 'dominantBaseline',\n  'dominant-baseline': 'dominantBaseline',\n  dur: 'dur',\n  dx: 'dx',\n  dy: 'dy',\n  edgemode: 'edgeMode',\n  elevation: 'elevation',\n  enablebackground: 'enableBackground',\n  'enable-background': 'enableBackground',\n  end: 'end',\n  exponent: 'exponent',\n  externalresourcesrequired: 'externalResourcesRequired',\n  fill: 'fill',\n  fillopacity: 'fillOpacity',\n  'fill-opacity': 'fillOpacity',\n  fillrule: 'fillRule',\n  'fill-rule': 'fillRule',\n  filter: 'filter',\n  filterres: 'filterRes',\n  filterunits: 'filterUnits',\n  floodopacity: 'floodOpacity',\n  'flood-opacity': 'floodOpacity',\n  floodcolor: 'floodColor',\n  'flood-color': 'floodColor',\n  focusable: 'focusable',\n  fontfamily: 'fontFamily',\n  'font-family': 'fontFamily',\n  fontsize: 'fontSize',\n  'font-size': 'fontSize',\n  fontsizeadjust: 'fontSizeAdjust',\n  'font-size-adjust': 'fontSizeAdjust',\n  fontstretch: 'fontStretch',\n  'font-stretch': 'fontStretch',\n  fontstyle: 'fontStyle',\n  'font-style': 'fontStyle',\n  fontvariant: 'fontVariant',\n  'font-variant': 'fontVariant',\n  fontweight: 'fontWeight',\n  'font-weight': 'fontWeight',\n  format: 'format',\n  from: 'from',\n  fx: 'fx',\n  fy: 'fy',\n  g1: 'g1',\n  g2: 'g2',\n  glyphname: 'glyphName',\n  'glyph-name': 'glyphName',\n  glyphorientationhorizontal: 'glyphOrientationHorizontal',\n  'glyph-orientation-horizontal': 'glyphOrientationHorizontal',\n  glyphorientationvertical: 'glyphOrientationVertical',\n  'glyph-orientation-vertical': 'glyphOrientationVertical',\n  glyphref: 'glyphRef',\n  gradienttransform: 'gradientTransform',\n  gradientunits: 'gradientUnits',\n  hanging: 'hanging',\n  horizadvx: 'horizAdvX',\n  'horiz-adv-x': 'horizAdvX',\n  horizoriginx: 'horizOriginX',\n  'horiz-origin-x': 'horizOriginX',\n  ideographic: 'ideographic',\n  imagerendering: 'imageRendering',\n  'image-rendering': 'imageRendering',\n  in2: 'in2',\n  in: 'in',\n  inlist: 'inlist',\n  intercept: 'intercept',\n  k1: 'k1',\n  k2: 'k2',\n  k3: 'k3',\n  k4: 'k4',\n  k: 'k',\n  kernelmatrix: 'kernelMatrix',\n  kernelunitlength: 'kernelUnitLength',\n  kerning: 'kerning',\n  keypoints: 'keyPoints',\n  keysplines: 'keySplines',\n  keytimes: 'keyTimes',\n  lengthadjust: 'lengthAdjust',\n  letterspacing: 'letterSpacing',\n  'letter-spacing': 'letterSpacing',\n  lightingcolor: 'lightingColor',\n  'lighting-color': 'lightingColor',\n  limitingconeangle: 'limitingConeAngle',\n  local: 'local',\n  markerend: 'markerEnd',\n  'marker-end': 'markerEnd',\n  markerheight: 'markerHeight',\n  markermid: 'markerMid',\n  'marker-mid': 'markerMid',\n  markerstart: 'markerStart',\n  'marker-start': 'markerStart',\n  markerunits: 'markerUnits',\n  markerwidth: 'markerWidth',\n  mask: 'mask',\n  maskcontentunits: 'maskContentUnits',\n  maskunits: 'maskUnits',\n  mathematical: 'mathematical',\n  mode: 'mode',\n  numoctaves: 'numOctaves',\n  offset: 'offset',\n  opacity: 'opacity',\n  operator: 'operator',\n  order: 'order',\n  orient: 'orient',\n  orientation: 'orientation',\n  origin: 'origin',\n  overflow: 'overflow',\n  overlineposition: 'overlinePosition',\n  'overline-position': 'overlinePosition',\n  overlinethickness: 'overlineThickness',\n  'overline-thickness': 'overlineThickness',\n  paintorder: 'paintOrder',\n  'paint-order': 'paintOrder',\n  panose1: 'panose1',\n  'panose-1': 'panose1',\n  pathlength: 'pathLength',\n  patterncontentunits: 'patternContentUnits',\n  patterntransform: 'patternTransform',\n  patternunits: 'patternUnits',\n  pointerevents: 'pointerEvents',\n  'pointer-events': 'pointerEvents',\n  points: 'points',\n  pointsatx: 'pointsAtX',\n  pointsaty: 'pointsAtY',\n  pointsatz: 'pointsAtZ',\n  prefix: 'prefix',\n  preservealpha: 'preserveAlpha',\n  preserveaspectratio: 'preserveAspectRatio',\n  primitiveunits: 'primitiveUnits',\n  property: 'property',\n  r: 'r',\n  radius: 'radius',\n  refx: 'refX',\n  refy: 'refY',\n  renderingintent: 'renderingIntent',\n  'rendering-intent': 'renderingIntent',\n  repeatcount: 'repeatCount',\n  repeatdur: 'repeatDur',\n  requiredextensions: 'requiredExtensions',\n  requiredfeatures: 'requiredFeatures',\n  resource: 'resource',\n  restart: 'restart',\n  result: 'result',\n  results: 'results',\n  rotate: 'rotate',\n  rx: 'rx',\n  ry: 'ry',\n  scale: 'scale',\n  security: 'security',\n  seed: 'seed',\n  shaperendering: 'shapeRendering',\n  'shape-rendering': 'shapeRendering',\n  slope: 'slope',\n  spacing: 'spacing',\n  specularconstant: 'specularConstant',\n  specularexponent: 'specularExponent',\n  speed: 'speed',\n  spreadmethod: 'spreadMethod',\n  startoffset: 'startOffset',\n  stddeviation: 'stdDeviation',\n  stemh: 'stemh',\n  stemv: 'stemv',\n  stitchtiles: 'stitchTiles',\n  stopcolor: 'stopColor',\n  'stop-color': 'stopColor',\n  stopopacity: 'stopOpacity',\n  'stop-opacity': 'stopOpacity',\n  strikethroughposition: 'strikethroughPosition',\n  'strikethrough-position': 'strikethroughPosition',\n  strikethroughthickness: 'strikethroughThickness',\n  'strikethrough-thickness': 'strikethroughThickness',\n  string: 'string',\n  stroke: 'stroke',\n  strokedasharray: 'strokeDasharray',\n  'stroke-dasharray': 'strokeDasharray',\n  strokedashoffset: 'strokeDashoffset',\n  'stroke-dashoffset': 'strokeDashoffset',\n  strokelinecap: 'strokeLinecap',\n  'stroke-linecap': 'strokeLinecap',\n  strokelinejoin: 'strokeLinejoin',\n  'stroke-linejoin': 'strokeLinejoin',\n  strokemiterlimit: 'strokeMiterlimit',\n  'stroke-miterlimit': 'strokeMiterlimit',\n  strokewidth: 'strokeWidth',\n  'stroke-width': 'strokeWidth',\n  strokeopacity: 'strokeOpacity',\n  'stroke-opacity': 'strokeOpacity',\n  suppresscontenteditablewarning: 'suppressContentEditableWarning',\n  suppresshydrationwarning: 'suppressHydrationWarning',\n  surfacescale: 'surfaceScale',\n  systemlanguage: 'systemLanguage',\n  tablevalues: 'tableValues',\n  targetx: 'targetX',\n  targety: 'targetY',\n  textanchor: 'textAnchor',\n  'text-anchor': 'textAnchor',\n  textdecoration: 'textDecoration',\n  'text-decoration': 'textDecoration',\n  textlength: 'textLength',\n  textrendering: 'textRendering',\n  'text-rendering': 'textRendering',\n  to: 'to',\n  transform: 'transform',\n  typeof: 'typeof',\n  u1: 'u1',\n  u2: 'u2',\n  underlineposition: 'underlinePosition',\n  'underline-position': 'underlinePosition',\n  underlinethickness: 'underlineThickness',\n  'underline-thickness': 'underlineThickness',\n  unicode: 'unicode',\n  unicodebidi: 'unicodeBidi',\n  'unicode-bidi': 'unicodeBidi',\n  unicoderange: 'unicodeRange',\n  'unicode-range': 'unicodeRange',\n  unitsperem: 'unitsPerEm',\n  'units-per-em': 'unitsPerEm',\n  unselectable: 'unselectable',\n  valphabetic: 'vAlphabetic',\n  'v-alphabetic': 'vAlphabetic',\n  values: 'values',\n  vectoreffect: 'vectorEffect',\n  'vector-effect': 'vectorEffect',\n  version: 'version',\n  vertadvy: 'vertAdvY',\n  'vert-adv-y': 'vertAdvY',\n  vertoriginx: 'vertOriginX',\n  'vert-origin-x': 'vertOriginX',\n  vertoriginy: 'vertOriginY',\n  'vert-origin-y': 'vertOriginY',\n  vhanging: 'vHanging',\n  'v-hanging': 'vHanging',\n  videographic: 'vIdeographic',\n  'v-ideographic': 'vIdeographic',\n  viewbox: 'viewBox',\n  viewtarget: 'viewTarget',\n  visibility: 'visibility',\n  vmathematical: 'vMathematical',\n  'v-mathematical': 'vMathematical',\n  vocab: 'vocab',\n  widths: 'widths',\n  wordspacing: 'wordSpacing',\n  'word-spacing': 'wordSpacing',\n  writingmode: 'writingMode',\n  'writing-mode': 'writingMode',\n  x1: 'x1',\n  x2: 'x2',\n  x: 'x',\n  xchannelselector: 'xChannelSelector',\n  xheight: 'xHeight',\n  'x-height': 'xHeight',\n  xlinkactuate: 'xlinkActuate',\n  'xlink:actuate': 'xlinkActuate',\n  xlinkarcrole: 'xlinkArcrole',\n  'xlink:arcrole': 'xlinkArcrole',\n  xlinkhref: 'xlinkHref',\n  'xlink:href': 'xlinkHref',\n  xlinkrole: 'xlinkRole',\n  'xlink:role': 'xlinkRole',\n  xlinkshow: 'xlinkShow',\n  'xlink:show': 'xlinkShow',\n  xlinktitle: 'xlinkTitle',\n  'xlink:title': 'xlinkTitle',\n  xlinktype: 'xlinkType',\n  'xlink:type': 'xlinkType',\n  xmlbase: 'xmlBase',\n  'xml:base': 'xmlBase',\n  xmllang: 'xmlLang',\n  'xml:lang': 'xmlLang',\n  xmlns: 'xmlns',\n  'xml:space': 'xmlSpace',\n  xmlnsxlink: 'xmlnsXlink',\n  'xmlns:xlink': 'xmlnsXlink',\n  xmlspace: 'xmlSpace',\n  y1: 'y1',\n  y2: 'y2',\n  y: 'y',\n  ychannelselector: 'yChannelSelector',\n  z: 'z',\n  zoomandpan: 'zoomAndPan'\n};\n\nexports.default = possibleStandardNames;\n\n},{}],8:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _possibleStandardName;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar possibleStandardNames = (_possibleStandardName = {\n  // HTML\n  accept: 'accept',\n  acceptCharset: 'acceptcharset'\n}, _defineProperty(_possibleStandardName, 'acceptCharset', 'accept-charset'), _defineProperty(_possibleStandardName, 'accessKey', 'accesskey'), _defineProperty(_possibleStandardName, 'action', 'action'), _defineProperty(_possibleStandardName, 'allowFullScreen', 'allowfullscreen'), _defineProperty(_possibleStandardName, 'alt', 'alt'), _defineProperty(_possibleStandardName, 'as', 'as'), _defineProperty(_possibleStandardName, 'async', 'async'), _defineProperty(_possibleStandardName, 'autoCapitalize', 'autocapitalize'), _defineProperty(_possibleStandardName, 'autoComplete', 'autocomplete'), _defineProperty(_possibleStandardName, 'autoCorrect', 'autocorrect'), _defineProperty(_possibleStandardName, 'autoFocus', 'autofocus'), _defineProperty(_possibleStandardName, 'autoPlay', 'autoplay'), _defineProperty(_possibleStandardName, 'autoSave', 'autosave'), _defineProperty(_possibleStandardName, 'capture', 'capture'), _defineProperty(_possibleStandardName, 'cellPadding', 'cellpadding'), _defineProperty(_possibleStandardName, 'cellSpacing', 'cellspacing'), _defineProperty(_possibleStandardName, 'challenge', 'challenge'), _defineProperty(_possibleStandardName, 'charSet', 'charset'), _defineProperty(_possibleStandardName, 'checked', 'checked'), _defineProperty(_possibleStandardName, 'children', 'children'), _defineProperty(_possibleStandardName, 'cite', 'cite'), _defineProperty(_possibleStandardName, 'className', 'class'), _defineProperty(_possibleStandardName, 'classID', 'classid'), _defineProperty(_possibleStandardName, 'cols', 'cols'), _defineProperty(_possibleStandardName, 'colSpan', 'colspan'), _defineProperty(_possibleStandardName, 'content', 'content'), _defineProperty(_possibleStandardName, 'contentEditable', 'contenteditable'), _defineProperty(_possibleStandardName, 'contextMenu', 'contextmenu'), _defineProperty(_possibleStandardName, 'controls', 'controls'), _defineProperty(_possibleStandardName, 'controlsList', 'controlslist'), _defineProperty(_possibleStandardName, 'coords', 'coords'), _defineProperty(_possibleStandardName, 'crossOrigin', 'crossorigin'), _defineProperty(_possibleStandardName, 'dangerouslySetInnerHTML', 'dangerouslysetinnerhtml'), _defineProperty(_possibleStandardName, 'data', 'data'), _defineProperty(_possibleStandardName, 'dateTime', 'datetime'), _defineProperty(_possibleStandardName, 'default', 'default'), _defineProperty(_possibleStandardName, 'defaultChecked', 'defaultchecked'), _defineProperty(_possibleStandardName, 'defaultValue', 'defaultvalue'), _defineProperty(_possibleStandardName, 'defer', 'defer'), _defineProperty(_possibleStandardName, 'dir', 'dir'), _defineProperty(_possibleStandardName, 'disabled', 'disabled'), _defineProperty(_possibleStandardName, 'download', 'download'), _defineProperty(_possibleStandardName, 'draggable', 'draggable'), _defineProperty(_possibleStandardName, 'encType', 'enctype'), _defineProperty(_possibleStandardName, 'htmlFor', 'for'), _defineProperty(_possibleStandardName, 'form', 'form'), _defineProperty(_possibleStandardName, 'formMethod', 'formmethod'), _defineProperty(_possibleStandardName, 'formAction', 'formaction'), _defineProperty(_possibleStandardName, 'formEncType', 'formenctype'), _defineProperty(_possibleStandardName, 'formNoValidate', 'formnovalidate'), _defineProperty(_possibleStandardName, 'formTarget', 'formtarget'), _defineProperty(_possibleStandardName, 'frameBorder', 'frameborder'), _defineProperty(_possibleStandardName, 'headers', 'headers'), _defineProperty(_possibleStandardName, 'height', 'height'), _defineProperty(_possibleStandardName, 'hidden', 'hidden'), _defineProperty(_possibleStandardName, 'high', 'high'), _defineProperty(_possibleStandardName, 'href', 'href'), _defineProperty(_possibleStandardName, 'hrefLang', 'hreflang'), _defineProperty(_possibleStandardName, 'htmlFor', 'htmlfor'), _defineProperty(_possibleStandardName, 'httpEquiv', 'httpequiv'), _defineProperty(_possibleStandardName, 'httpEquiv', 'http-equiv'), _defineProperty(_possibleStandardName, 'icon', 'icon'), _defineProperty(_possibleStandardName, 'id', 'id'), _defineProperty(_possibleStandardName, 'innerHTML', 'innerhtml'), _defineProperty(_possibleStandardName, 'inputMode', 'inputmode'), _defineProperty(_possibleStandardName, 'integrity', 'integrity'), _defineProperty(_possibleStandardName, 'is', 'is'), _defineProperty(_possibleStandardName, 'itemID', 'itemid'), _defineProperty(_possibleStandardName, 'itemProp', 'itemprop'), _defineProperty(_possibleStandardName, 'itemRef', 'itemref'), _defineProperty(_possibleStandardName, 'itemScope', 'itemscope'), _defineProperty(_possibleStandardName, 'itemType', 'itemtype'), _defineProperty(_possibleStandardName, 'keyParams', 'keyparams'), _defineProperty(_possibleStandardName, 'keyType', 'keytype'), _defineProperty(_possibleStandardName, 'kind', 'kind'), _defineProperty(_possibleStandardName, 'label', 'label'), _defineProperty(_possibleStandardName, 'lang', 'lang'), _defineProperty(_possibleStandardName, 'list', 'list'), _defineProperty(_possibleStandardName, 'loop', 'loop'), _defineProperty(_possibleStandardName, 'low', 'low'), _defineProperty(_possibleStandardName, 'manifest', 'manifest'), _defineProperty(_possibleStandardName, 'marginWidth', 'marginwidth'), _defineProperty(_possibleStandardName, 'marginHeight', 'marginheight'), _defineProperty(_possibleStandardName, 'max', 'max'), _defineProperty(_possibleStandardName, 'maxLength', 'maxlength'), _defineProperty(_possibleStandardName, 'media', 'media'), _defineProperty(_possibleStandardName, 'mediaGroup', 'mediagroup'), _defineProperty(_possibleStandardName, 'method', 'method'), _defineProperty(_possibleStandardName, 'min', 'min'), _defineProperty(_possibleStandardName, 'minLength', 'minlength'), _defineProperty(_possibleStandardName, 'multiple', 'multiple'), _defineProperty(_possibleStandardName, 'muted', 'muted'), _defineProperty(_possibleStandardName, 'name', 'name'), _defineProperty(_possibleStandardName, 'noModule', 'nomodule'), _defineProperty(_possibleStandardName, 'nonce', 'nonce'), _defineProperty(_possibleStandardName, 'noValidate', 'novalidate'), _defineProperty(_possibleStandardName, 'open', 'open'), _defineProperty(_possibleStandardName, 'optimum', 'optimum'), _defineProperty(_possibleStandardName, 'pattern', 'pattern'), _defineProperty(_possibleStandardName, 'placeholder', 'placeholder'), _defineProperty(_possibleStandardName, 'playsInline', 'playsinline'), _defineProperty(_possibleStandardName, 'poster', 'poster'), _defineProperty(_possibleStandardName, 'preload', 'preload'), _defineProperty(_possibleStandardName, 'profile', 'profile'), _defineProperty(_possibleStandardName, 'radioGroup', 'radiogroup'), _defineProperty(_possibleStandardName, 'readOnly', 'readonly'), _defineProperty(_possibleStandardName, 'referrerPolicy', 'referrerpolicy'), _defineProperty(_possibleStandardName, 'rel', 'rel'), _defineProperty(_possibleStandardName, 'required', 'required'), _defineProperty(_possibleStandardName, 'reversed', 'reversed'), _defineProperty(_possibleStandardName, 'role', 'role'), _defineProperty(_possibleStandardName, 'rows', 'rows'), _defineProperty(_possibleStandardName, 'rowSpan', 'rowspan'), _defineProperty(_possibleStandardName, 'sandbox', 'sandbox'), _defineProperty(_possibleStandardName, 'scope', 'scope'), _defineProperty(_possibleStandardName, 'scoped', 'scoped'), _defineProperty(_possibleStandardName, 'scrolling', 'scrolling'), _defineProperty(_possibleStandardName, 'seamless', 'seamless'), _defineProperty(_possibleStandardName, 'selected', 'selected'), _defineProperty(_possibleStandardName, 'shape', 'shape'), _defineProperty(_possibleStandardName, 'size', 'size'), _defineProperty(_possibleStandardName, 'sizes', 'sizes'), _defineProperty(_possibleStandardName, 'span', 'span'), _defineProperty(_possibleStandardName, 'spellCheck', 'spellcheck'), _defineProperty(_possibleStandardName, 'src', 'src'), _defineProperty(_possibleStandardName, 'srcDoc', 'srcdoc'), _defineProperty(_possibleStandardName, 'srcLang', 'srclang'), _defineProperty(_possibleStandardName, 'srcSet', 'srcset'), _defineProperty(_possibleStandardName, 'start', 'start'), _defineProperty(_possibleStandardName, 'step', 'step'), _defineProperty(_possibleStandardName, 'style', 'style'), _defineProperty(_possibleStandardName, 'summary', 'summary'), _defineProperty(_possibleStandardName, 'tabIndex', 'tabindex'), _defineProperty(_possibleStandardName, 'target', 'target'), _defineProperty(_possibleStandardName, 'title', 'title'), _defineProperty(_possibleStandardName, 'type', 'type'), _defineProperty(_possibleStandardName, 'useMap', 'usemap'), _defineProperty(_possibleStandardName, 'value', 'value'), _defineProperty(_possibleStandardName, 'width', 'width'), _defineProperty(_possibleStandardName, 'wmode', 'wmode'), _defineProperty(_possibleStandardName, 'wrap', 'wrap'), _defineProperty(_possibleStandardName, 'about', 'about'), _defineProperty(_possibleStandardName, 'accentHeight', 'accentheight'), _defineProperty(_possibleStandardName, 'accentHeight', 'accent-height'), _defineProperty(_possibleStandardName, 'accumulate', 'accumulate'), _defineProperty(_possibleStandardName, 'additive', 'additive'), _defineProperty(_possibleStandardName, 'alignmentBaseline', 'alignmentbaseline'), _defineProperty(_possibleStandardName, 'alignmentBaseline', 'alignment-baseline'), _defineProperty(_possibleStandardName, 'allowReorder', 'allowreorder'), _defineProperty(_possibleStandardName, 'alphabetic', 'alphabetic'), _defineProperty(_possibleStandardName, 'amplitude', 'amplitude'), _defineProperty(_possibleStandardName, 'arabicForm', 'arabicform'), _defineProperty(_possibleStandardName, 'arabicForm', 'arabic-form'), _defineProperty(_possibleStandardName, 'ascent', 'ascent'), _defineProperty(_possibleStandardName, 'attributeName', 'attributename'), _defineProperty(_possibleStandardName, 'attributeType', 'attributetype'), _defineProperty(_possibleStandardName, 'autoReverse', 'autoreverse'), _defineProperty(_possibleStandardName, 'azimuth', 'azimuth'), _defineProperty(_possibleStandardName, 'baseFrequency', 'basefrequency'), _defineProperty(_possibleStandardName, 'baselineShift', 'baselineshift'), _defineProperty(_possibleStandardName, 'baselineShift', 'baseline-shift'), _defineProperty(_possibleStandardName, 'baseProfile', 'baseprofile'), _defineProperty(_possibleStandardName, 'bbox', 'bbox'), _defineProperty(_possibleStandardName, 'begin', 'begin'), _defineProperty(_possibleStandardName, 'bias', 'bias'), _defineProperty(_possibleStandardName, 'by', 'by'), _defineProperty(_possibleStandardName, 'calcMode', 'calcmode'), _defineProperty(_possibleStandardName, 'capHeight', 'capheight'), _defineProperty(_possibleStandardName, 'capHeight', 'cap-height'), _defineProperty(_possibleStandardName, 'clip', 'clip'), _defineProperty(_possibleStandardName, 'clipPath', 'clippath'), _defineProperty(_possibleStandardName, 'clipPath', 'clip-path'), _defineProperty(_possibleStandardName, 'clipPathUnits', 'clippathunits'), _defineProperty(_possibleStandardName, 'clipRule', 'cliprule'), _defineProperty(_possibleStandardName, 'clipRule', 'clip-rule'), _defineProperty(_possibleStandardName, 'color', 'color'), _defineProperty(_possibleStandardName, 'colorInterpolation', 'colorinterpolation'), _defineProperty(_possibleStandardName, 'colorInterpolation', 'color-interpolation'), _defineProperty(_possibleStandardName, 'colorInterpolationFilters', 'colorinterpolationfilters'), _defineProperty(_possibleStandardName, 'colorInterpolationFilters', 'color-interpolation-filters'), _defineProperty(_possibleStandardName, 'colorProfile', 'colorprofile'), _defineProperty(_possibleStandardName, 'colorProfile', 'color-profile'), _defineProperty(_possibleStandardName, 'colorRendering', 'colorrendering'), _defineProperty(_possibleStandardName, 'colorRendering', 'color-rendering'), _defineProperty(_possibleStandardName, 'contentScriptType', 'contentscripttype'), _defineProperty(_possibleStandardName, 'contentStyleType', 'contentstyletype'), _defineProperty(_possibleStandardName, 'cursor', 'cursor'), _defineProperty(_possibleStandardName, 'cx', 'cx'), _defineProperty(_possibleStandardName, 'cy', 'cy'), _defineProperty(_possibleStandardName, 'd', 'd'), _defineProperty(_possibleStandardName, 'datatype', 'datatype'), _defineProperty(_possibleStandardName, 'decelerate', 'decelerate'), _defineProperty(_possibleStandardName, 'descent', 'descent'), _defineProperty(_possibleStandardName, 'diffuseConstant', 'diffuseconstant'), _defineProperty(_possibleStandardName, 'direction', 'direction'), _defineProperty(_possibleStandardName, 'display', 'display'), _defineProperty(_possibleStandardName, 'divisor', 'divisor'), _defineProperty(_possibleStandardName, 'dominantBaseline', 'dominantbaseline'), _defineProperty(_possibleStandardName, 'dominantBaseline', 'dominant-baseline'), _defineProperty(_possibleStandardName, 'dur', 'dur'), _defineProperty(_possibleStandardName, 'dx', 'dx'), _defineProperty(_possibleStandardName, 'dy', 'dy'), _defineProperty(_possibleStandardName, 'edgeMode', 'edgemode'), _defineProperty(_possibleStandardName, 'elevation', 'elevation'), _defineProperty(_possibleStandardName, 'enableBackground', 'enablebackground'), _defineProperty(_possibleStandardName, 'enableBackground', 'enable-background'), _defineProperty(_possibleStandardName, 'end', 'end'), _defineProperty(_possibleStandardName, 'exponent', 'exponent'), _defineProperty(_possibleStandardName, 'externalResourcesRequired', 'externalresourcesrequired'), _defineProperty(_possibleStandardName, 'fill', 'fill'), _defineProperty(_possibleStandardName, 'fillOpacity', 'fillopacity'), _defineProperty(_possibleStandardName, 'fillOpacity', 'fill-opacity'), _defineProperty(_possibleStandardName, 'fillRule', 'fillrule'), _defineProperty(_possibleStandardName, 'fillRule', 'fill-rule'), _defineProperty(_possibleStandardName, 'filter', 'filter'), _defineProperty(_possibleStandardName, 'filterRes', 'filterres'), _defineProperty(_possibleStandardName, 'filterUnits', 'filterunits'), _defineProperty(_possibleStandardName, 'floodOpacity', 'floodopacity'), _defineProperty(_possibleStandardName, 'floodOpacity', 'flood-opacity'), _defineProperty(_possibleStandardName, 'floodColor', 'floodcolor'), _defineProperty(_possibleStandardName, 'floodColor', 'flood-color'), _defineProperty(_possibleStandardName, 'focusable', 'focusable'), _defineProperty(_possibleStandardName, 'fontFamily', 'fontfamily'), _defineProperty(_possibleStandardName, 'fontFamily', 'font-family'), _defineProperty(_possibleStandardName, 'fontSize', 'fontsize'), _defineProperty(_possibleStandardName, 'fontSize', 'font-size'), _defineProperty(_possibleStandardName, 'fontSizeAdjust', 'fontsizeadjust'), _defineProperty(_possibleStandardName, 'fontSizeAdjust', 'font-size-adjust'), _defineProperty(_possibleStandardName, 'fontStretch', 'fontstretch'), _defineProperty(_possibleStandardName, 'fontStretch', 'font-stretch'), _defineProperty(_possibleStandardName, 'fontStyle', 'fontstyle'), _defineProperty(_possibleStandardName, 'fontStyle', 'font-style'), _defineProperty(_possibleStandardName, 'fontVariant', 'fontvariant'), _defineProperty(_possibleStandardName, 'fontVariant', 'font-variant'), _defineProperty(_possibleStandardName, 'fontWeight', 'fontweight'), _defineProperty(_possibleStandardName, 'fontWeight', 'font-weight'), _defineProperty(_possibleStandardName, 'format', 'format'), _defineProperty(_possibleStandardName, 'from', 'from'), _defineProperty(_possibleStandardName, 'fx', 'fx'), _defineProperty(_possibleStandardName, 'fy', 'fy'), _defineProperty(_possibleStandardName, 'g1', 'g1'), _defineProperty(_possibleStandardName, 'g2', 'g2'), _defineProperty(_possibleStandardName, 'glyphName', 'glyphname'), _defineProperty(_possibleStandardName, 'glyphName', 'glyph-name'), _defineProperty(_possibleStandardName, 'glyphOrientationHorizontal', 'glyphorientationhorizontal'), _defineProperty(_possibleStandardName, 'glyphOrientationHorizontal', 'glyph-orientation-horizontal'), _defineProperty(_possibleStandardName, 'glyphOrientationVertical', 'glyphorientationvertical'), _defineProperty(_possibleStandardName, 'glyphOrientationVertical', 'glyph-orientation-vertical'), _defineProperty(_possibleStandardName, 'glyphRef', 'glyphref'), _defineProperty(_possibleStandardName, 'gradientTransform', 'gradienttransform'), _defineProperty(_possibleStandardName, 'gradientUnits', 'gradientunits'), _defineProperty(_possibleStandardName, 'hanging', 'hanging'), _defineProperty(_possibleStandardName, 'horizAdvX', 'horizadvx'), _defineProperty(_possibleStandardName, 'horizAdvX', 'horiz-adv-x'), _defineProperty(_possibleStandardName, 'horizOriginX', 'horizoriginx'), _defineProperty(_possibleStandardName, 'horizOriginX', 'horiz-origin-x'), _defineProperty(_possibleStandardName, 'ideographic', 'ideographic'), _defineProperty(_possibleStandardName, 'imageRendering', 'imagerendering'), _defineProperty(_possibleStandardName, 'imageRendering', 'image-rendering'), _defineProperty(_possibleStandardName, 'in2', 'in2'), _defineProperty(_possibleStandardName, 'in', 'in'), _defineProperty(_possibleStandardName, 'inlist', 'inlist'), _defineProperty(_possibleStandardName, 'intercept', 'intercept'), _defineProperty(_possibleStandardName, 'k1', 'k1'), _defineProperty(_possibleStandardName, 'k2', 'k2'), _defineProperty(_possibleStandardName, 'k3', 'k3'), _defineProperty(_possibleStandardName, 'k4', 'k4'), _defineProperty(_possibleStandardName, 'k', 'k'), _defineProperty(_possibleStandardName, 'kernelMatrix', 'kernelmatrix'), _defineProperty(_possibleStandardName, 'kernelUnitLength', 'kernelunitlength'), _defineProperty(_possibleStandardName, 'kerning', 'kerning'), _defineProperty(_possibleStandardName, 'keyPoints', 'keypoints'), _defineProperty(_possibleStandardName, 'keySplines', 'keysplines'), _defineProperty(_possibleStandardName, 'keyTimes', 'keytimes'), _defineProperty(_possibleStandardName, 'lengthAdjust', 'lengthadjust'), _defineProperty(_possibleStandardName, 'letterSpacing', 'letterspacing'), _defineProperty(_possibleStandardName, 'letterSpacing', 'letter-spacing'), _defineProperty(_possibleStandardName, 'lightingColor', 'lightingcolor'), _defineProperty(_possibleStandardName, 'lightingColor', 'lighting-color'), _defineProperty(_possibleStandardName, 'limitingConeAngle', 'limitingconeangle'), _defineProperty(_possibleStandardName, 'local', 'local'), _defineProperty(_possibleStandardName, 'markerEnd', 'markerend'), _defineProperty(_possibleStandardName, 'markerEnd', 'marker-end'), _defineProperty(_possibleStandardName, 'markerHeight', 'markerheight'), _defineProperty(_possibleStandardName, 'markerMid', 'markermid'), _defineProperty(_possibleStandardName, 'markerMid', 'marker-mid'), _defineProperty(_possibleStandardName, 'markerStart', 'markerstart'), _defineProperty(_possibleStandardName, 'markerStart', 'marker-start'), _defineProperty(_possibleStandardName, 'markerUnits', 'markerunits'), _defineProperty(_possibleStandardName, 'markerWidth', 'markerwidth'), _defineProperty(_possibleStandardName, 'mask', 'mask'), _defineProperty(_possibleStandardName, 'maskContentUnits', 'maskcontentunits'), _defineProperty(_possibleStandardName, 'maskUnits', 'maskunits'), _defineProperty(_possibleStandardName, 'mathematical', 'mathematical'), _defineProperty(_possibleStandardName, 'mode', 'mode'), _defineProperty(_possibleStandardName, 'numOctaves', 'numoctaves'), _defineProperty(_possibleStandardName, 'offset', 'offset'), _defineProperty(_possibleStandardName, 'opacity', 'opacity'), _defineProperty(_possibleStandardName, 'operator', 'operator'), _defineProperty(_possibleStandardName, 'order', 'order'), _defineProperty(_possibleStandardName, 'orient', 'orient'), _defineProperty(_possibleStandardName, 'orientation', 'orientation'), _defineProperty(_possibleStandardName, 'origin', 'origin'), _defineProperty(_possibleStandardName, 'overflow', 'overflow'), _defineProperty(_possibleStandardName, 'overlinePosition', 'overlineposition'), _defineProperty(_possibleStandardName, 'overlinePosition', 'overline-position'), _defineProperty(_possibleStandardName, 'overlineThickness', 'overlinethickness'), _defineProperty(_possibleStandardName, 'overlineThickness', 'overline-thickness'), _defineProperty(_possibleStandardName, 'paintOrder', 'paintorder'), _defineProperty(_possibleStandardName, 'paintOrder', 'paint-order'), _defineProperty(_possibleStandardName, 'panose1', 'panose1'), _defineProperty(_possibleStandardName, 'panose1', 'panose-1'), _defineProperty(_possibleStandardName, 'pathLength', 'pathlength'), _defineProperty(_possibleStandardName, 'patternContentUnits', 'patterncontentunits'), _defineProperty(_possibleStandardName, 'patternTransform', 'patterntransform'), _defineProperty(_possibleStandardName, 'patternUnits', 'patternunits'), _defineProperty(_possibleStandardName, 'pointerEvents', 'pointerevents'), _defineProperty(_possibleStandardName, 'pointerEvents', 'pointer-events'), _defineProperty(_possibleStandardName, 'points', 'points'), _defineProperty(_possibleStandardName, 'pointsAtX', 'pointsatx'), _defineProperty(_possibleStandardName, 'pointsAtY', 'pointsaty'), _defineProperty(_possibleStandardName, 'pointsAtZ', 'pointsatz'), _defineProperty(_possibleStandardName, 'prefix', 'prefix'), _defineProperty(_possibleStandardName, 'preserveAlpha', 'preservealpha'), _defineProperty(_possibleStandardName, 'preserveAspectRatio', 'preserveaspectratio'), _defineProperty(_possibleStandardName, 'primitiveUnits', 'primitiveunits'), _defineProperty(_possibleStandardName, 'property', 'property'), _defineProperty(_possibleStandardName, 'r', 'r'), _defineProperty(_possibleStandardName, 'radius', 'radius'), _defineProperty(_possibleStandardName, 'refX', 'refx'), _defineProperty(_possibleStandardName, 'refY', 'refy'), _defineProperty(_possibleStandardName, 'renderingIntent', 'renderingintent'), _defineProperty(_possibleStandardName, 'renderingIntent', 'rendering-intent'), _defineProperty(_possibleStandardName, 'repeatCount', 'repeatcount'), _defineProperty(_possibleStandardName, 'repeatDur', 'repeatdur'), _defineProperty(_possibleStandardName, 'requiredExtensions', 'requiredextensions'), _defineProperty(_possibleStandardName, 'requiredFeatures', 'requiredfeatures'), _defineProperty(_possibleStandardName, 'resource', 'resource'), _defineProperty(_possibleStandardName, 'restart', 'restart'), _defineProperty(_possibleStandardName, 'result', 'result'), _defineProperty(_possibleStandardName, 'results', 'results'), _defineProperty(_possibleStandardName, 'rotate', 'rotate'), _defineProperty(_possibleStandardName, 'rx', 'rx'), _defineProperty(_possibleStandardName, 'ry', 'ry'), _defineProperty(_possibleStandardName, 'scale', 'scale'), _defineProperty(_possibleStandardName, 'security', 'security'), _defineProperty(_possibleStandardName, 'seed', 'seed'), _defineProperty(_possibleStandardName, 'shapeRendering', 'shaperendering'), _defineProperty(_possibleStandardName, 'shapeRendering', 'shape-rendering'), _defineProperty(_possibleStandardName, 'slope', 'slope'), _defineProperty(_possibleStandardName, 'spacing', 'spacing'), _defineProperty(_possibleStandardName, 'specularConstant', 'specularconstant'), _defineProperty(_possibleStandardName, 'specularExponent', 'specularexponent'), _defineProperty(_possibleStandardName, 'speed', 'speed'), _defineProperty(_possibleStandardName, 'spreadMethod', 'spreadmethod'), _defineProperty(_possibleStandardName, 'startOffset', 'startoffset'), _defineProperty(_possibleStandardName, 'stdDeviation', 'stddeviation'), _defineProperty(_possibleStandardName, 'stemh', 'stemh'), _defineProperty(_possibleStandardName, 'stemv', 'stemv'), _defineProperty(_possibleStandardName, 'stitchTiles', 'stitchtiles'), _defineProperty(_possibleStandardName, 'stopColor', 'stopcolor'), _defineProperty(_possibleStandardName, 'stopColor', 'stop-color'), _defineProperty(_possibleStandardName, 'stopOpacity', 'stopopacity'), _defineProperty(_possibleStandardName, 'stopOpacity', 'stop-opacity'), _defineProperty(_possibleStandardName, 'strikethroughPosition', 'strikethroughposition'), _defineProperty(_possibleStandardName, 'strikethroughPosition', 'strikethrough-position'), _defineProperty(_possibleStandardName, 'strikethroughThickness', 'strikethroughthickness'), _defineProperty(_possibleStandardName, 'strikethroughThickness', 'strikethrough-thickness'), _defineProperty(_possibleStandardName, 'string', 'string'), _defineProperty(_possibleStandardName, 'stroke', 'stroke'), _defineProperty(_possibleStandardName, 'strokeDasharray', 'strokedasharray'), _defineProperty(_possibleStandardName, 'strokeDasharray', 'stroke-dasharray'), _defineProperty(_possibleStandardName, 'strokeDashoffset', 'strokedashoffset'), _defineProperty(_possibleStandardName, 'strokeDashoffset', 'stroke-dashoffset'), _defineProperty(_possibleStandardName, 'strokeLinecap', 'strokelinecap'), _defineProperty(_possibleStandardName, 'strokeLinecap', 'stroke-linecap'), _defineProperty(_possibleStandardName, 'strokeLinejoin', 'strokelinejoin'), _defineProperty(_possibleStandardName, 'strokeLinejoin', 'stroke-linejoin'), _defineProperty(_possibleStandardName, 'strokeMiterlimit', 'strokemiterlimit'), _defineProperty(_possibleStandardName, 'strokeMiterlimit', 'stroke-miterlimit'), _defineProperty(_possibleStandardName, 'strokeWidth', 'strokewidth'), _defineProperty(_possibleStandardName, 'strokeWidth', 'stroke-width'), _defineProperty(_possibleStandardName, 'strokeOpacity', 'strokeopacity'), _defineProperty(_possibleStandardName, 'strokeOpacity', 'stroke-opacity'), _defineProperty(_possibleStandardName, 'suppressContentEditableWarning', 'suppresscontenteditablewarning'), _defineProperty(_possibleStandardName, 'suppressHydrationWarning', 'suppresshydrationwarning'), _defineProperty(_possibleStandardName, 'surfaceScale', 'surfacescale'), _defineProperty(_possibleStandardName, 'systemLanguage', 'systemlanguage'), _defineProperty(_possibleStandardName, 'tableValues', 'tablevalues'), _defineProperty(_possibleStandardName, 'targetX', 'targetx'), _defineProperty(_possibleStandardName, 'targetY', 'targety'), _defineProperty(_possibleStandardName, 'textAnchor', 'textanchor'), _defineProperty(_possibleStandardName, 'textAnchor', 'text-anchor'), _defineProperty(_possibleStandardName, 'textDecoration', 'textdecoration'), _defineProperty(_possibleStandardName, 'textDecoration', 'text-decoration'), _defineProperty(_possibleStandardName, 'textLength', 'textlength'), _defineProperty(_possibleStandardName, 'textRendering', 'textrendering'), _defineProperty(_possibleStandardName, 'textRendering', 'text-rendering'), _defineProperty(_possibleStandardName, 'to', 'to'), _defineProperty(_possibleStandardName, 'transform', 'transform'), _defineProperty(_possibleStandardName, 'typeof', 'typeof'), _defineProperty(_possibleStandardName, 'u1', 'u1'), _defineProperty(_possibleStandardName, 'u2', 'u2'), _defineProperty(_possibleStandardName, 'underlinePosition', 'underlineposition'), _defineProperty(_possibleStandardName, 'underlinePosition', 'underline-position'), _defineProperty(_possibleStandardName, 'underlineThickness', 'underlinethickness'), _defineProperty(_possibleStandardName, 'underlineThickness', 'underline-thickness'), _defineProperty(_possibleStandardName, 'unicode', 'unicode'), _defineProperty(_possibleStandardName, 'unicodeBidi', 'unicodebidi'), _defineProperty(_possibleStandardName, 'unicodeBidi', 'unicode-bidi'), _defineProperty(_possibleStandardName, 'unicodeRange', 'unicoderange'), _defineProperty(_possibleStandardName, 'unicodeRange', 'unicode-range'), _defineProperty(_possibleStandardName, 'unitsPerEm', 'unitsperem'), _defineProperty(_possibleStandardName, 'unitsPerEm', 'units-per-em'), _defineProperty(_possibleStandardName, 'unselectable', 'unselectable'), _defineProperty(_possibleStandardName, 'vAlphabetic', 'valphabetic'), _defineProperty(_possibleStandardName, 'vAlphabetic', 'v-alphabetic'), _defineProperty(_possibleStandardName, 'values', 'values'), _defineProperty(_possibleStandardName, 'vectorEffect', 'vectoreffect'), _defineProperty(_possibleStandardName, 'vectorEffect', 'vector-effect'), _defineProperty(_possibleStandardName, 'version', 'version'), _defineProperty(_possibleStandardName, 'vertAdvY', 'vertadvy'), _defineProperty(_possibleStandardName, 'vertAdvY', 'vert-adv-y'), _defineProperty(_possibleStandardName, 'vertOriginX', 'vertoriginx'), _defineProperty(_possibleStandardName, 'vertOriginX', 'vert-origin-x'), _defineProperty(_possibleStandardName, 'vertOriginY', 'vertoriginy'), _defineProperty(_possibleStandardName, 'vertOriginY', 'vert-origin-y'), _defineProperty(_possibleStandardName, 'vHanging', 'vhanging'), _defineProperty(_possibleStandardName, 'vHanging', 'v-hanging'), _defineProperty(_possibleStandardName, 'vIdeographic', 'videographic'), _defineProperty(_possibleStandardName, 'vIdeographic', 'v-ideographic'), _defineProperty(_possibleStandardName, 'viewBox', 'viewbox'), _defineProperty(_possibleStandardName, 'viewTarget', 'viewtarget'), _defineProperty(_possibleStandardName, 'visibility', 'visibility'), _defineProperty(_possibleStandardName, 'vMathematical', 'vmathematical'), _defineProperty(_possibleStandardName, 'vMathematical', 'v-mathematical'), _defineProperty(_possibleStandardName, 'vocab', 'vocab'), _defineProperty(_possibleStandardName, 'widths', 'widths'), _defineProperty(_possibleStandardName, 'wordSpacing', 'wordspacing'), _defineProperty(_possibleStandardName, 'wordSpacing', 'word-spacing'), _defineProperty(_possibleStandardName, 'writingMode', 'writingmode'), _defineProperty(_possibleStandardName, 'writingMode', 'writing-mode'), _defineProperty(_possibleStandardName, 'x1', 'x1'), _defineProperty(_possibleStandardName, 'x2', 'x2'), _defineProperty(_possibleStandardName, 'x', 'x'), _defineProperty(_possibleStandardName, 'xChannelSelector', 'xchannelselector'), _defineProperty(_possibleStandardName, 'xHeight', 'xheight'), _defineProperty(_possibleStandardName, 'xHeight', 'x-height'), _defineProperty(_possibleStandardName, 'xlinkActuate', 'xlinkactuate'), _defineProperty(_possibleStandardName, 'xlinkActuate', 'xlink:actuate'), _defineProperty(_possibleStandardName, 'xlinkArcrole', 'xlinkarcrole'), _defineProperty(_possibleStandardName, 'xlinkArcrole', 'xlink:arcrole'), _defineProperty(_possibleStandardName, 'xlinkHref', 'xlinkhref'), _defineProperty(_possibleStandardName, 'xlinkHref', 'xlink:href'), _defineProperty(_possibleStandardName, 'xlinkRole', 'xlinkrole'), _defineProperty(_possibleStandardName, 'xlinkRole', 'xlink:role'), _defineProperty(_possibleStandardName, 'xlinkShow', 'xlinkshow'), _defineProperty(_possibleStandardName, 'xlinkShow', 'xlink:show'), _defineProperty(_possibleStandardName, 'xlinkTitle', 'xlinktitle'), _defineProperty(_possibleStandardName, 'xlinkTitle', 'xlink:title'), _defineProperty(_possibleStandardName, 'xlinkType', 'xlinktype'), _defineProperty(_possibleStandardName, 'xlinkType', 'xlink:type'), _defineProperty(_possibleStandardName, 'xmlBase', 'xmlbase'), _defineProperty(_possibleStandardName, 'xmlBase', 'xml:base'), _defineProperty(_possibleStandardName, 'xmlLang', 'xmllang'), _defineProperty(_possibleStandardName, 'xmlLang', 'xml:lang'), _defineProperty(_possibleStandardName, 'xmlns', 'xmlns'), _defineProperty(_possibleStandardName, 'xmlSpace', 'xml:space'), _defineProperty(_possibleStandardName, 'xmlnsXlink', 'xmlnsxlink'), _defineProperty(_possibleStandardName, 'xmlnsXlink', 'xmlns:xlink'), _defineProperty(_possibleStandardName, 'xmlSpace', 'xmlspace'), _defineProperty(_possibleStandardName, 'y1', 'y1'), _defineProperty(_possibleStandardName, 'y2', 'y2'), _defineProperty(_possibleStandardName, 'y', 'y'), _defineProperty(_possibleStandardName, 'yChannelSelector', 'ychannelselector'), _defineProperty(_possibleStandardName, 'z', 'z'), _defineProperty(_possibleStandardName, 'zoomAndPan', 'zoomandpan'), _possibleStandardName);\n\nexports.default = possibleStandardNames;\n\n},{}],9:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nexports.formatAttributes = formatAttributes;\nexports.toHTML = toHTML;\n\nvar _compat = require('./compat');\n\nvar _rev_prop_map = require('./rev_prop_map');\n\nvar _rev_prop_map2 = _interopRequireDefault(_rev_prop_map);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar options = {\n  attrLowerCase: false,\n  styleAsCss: false\n};\n\nfunction formatAttributes(attributes, options) {\n  var attrString = Object.keys(attributes).reduce(function (attrs, currentKey) {\n    var key = currentKey;\n    if (options.hasOpts && options.attrLowerCase && _rev_prop_map2.default[currentKey]) key = _rev_prop_map2.default[currentKey];\n\n    var value = attributes[currentKey];\n    if (!value) return attrs + ' ' + key;else if (key === 'style' && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {\n      var styles = '';\n      Object.keys(value).map(function (_name) {\n        var name = _name;\n        if (options.hasOpts && options.styleAsCss) name = _name.split(/(?=[A-Z])/).join('-').toLowerCase();\n\n        styles += name + ':' + value[_name] + ';';\n      });\n      var quoteEscape = styles.indexOf('\\'') !== -1;\n      var quote = quoteEscape ? '\"' : '\\'';\n      return attrs + ' ' + key + '=' + quote + styles + quote;\n    }\n    if (typeof value === 'boolean') value = '' + value;\n\n    if (typeof value === 'string') {\n      var _quoteEscape = value.indexOf('\\'') !== -1;\n      var _quote = _quoteEscape ? '\"' : '\\'';\n      return attrs + ' ' + key + '=' + _quote + value + _quote;\n    }\n    return attrs;\n  }, '');\n\n  attrString = typeof attrString === 'string' && attrString.trim() || '';\n  return attrString.length ? ' ' + attrString : '';\n}\n\nvar buildTag = function buildTag(tagName, attributes, children, options) {\n\n  return '<' + tagName + formatAttributes(attributes, options) + '>' + (toHTML(children, options) || '') + '</' + tagName + '>';\n};\n\nvar buildSelfCloseTag = function buildSelfCloseTag(tagName, attributes, options) {\n  var formatted = formatAttributes(attributes, options);\n  formatted = formatted.length ? formatted + ' ' : formatted;\n  return '<' + tagName + formatted + '/' + '>';\n};\n\nfunction toHTML(tree, _options) {\n\n  options = options.hasOpts ? Object.assign(options, _options) : _options;\n\n  if (typeof tree === 'string') return tree;\n  return tree && tree.map(function (node) {\n    if (typeof node === 'string') return node;\n    if (node.type === 'comment') return '<!--' + node.content + '-->';\n    var tagName = node[0];\n    var attributes = node[1];\n    var children = node[2];\n    var isSelfClosing = (0, _compat.arrayIncludes)(options.voidTags, tagName.toLowerCase());\n    return isSelfClosing ? buildSelfCloseTag(tagName, attributes, options) : buildTag(tagName, attributes, children, options);\n  }).join('');\n}\n\nexports.default = { toHTML: toHTML };\n\n},{\"./compat\":1,\"./rev_prop_map\":8}],10:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\n  Tags which contain arbitary non-parsed content\n  For example: <script> JavaScript should not be parsed\n*/\nvar childlessTags = exports.childlessTags = ['style', 'script', 'template'];\n\n/*\n  Tags which auto-close because they cannot be nested\n  For example: <p>Outer<p>Inner is <p>Outer</p><p>Inner</p>\n*/\nvar closingTags = exports.closingTags = ['html', 'head', 'body', 'p', 'dt', 'dd', 'li', 'option', 'thead', 'th', 'tbody', 'tr', 'td', 'tfoot', 'colgroup'];\n\n/*\n  Closing tags which have ancestor tags which\n  may exist within them which prevent the\n  closing tag from auto-closing.\n  For example: in <li><ul><li></ul></li>,\n  the top-level <li> should not auto-close.\n*/\nvar closingTagAncestorBreakers = exports.closingTagAncestorBreakers = {\n  li: ['ul', 'ol', 'menu'],\n  dt: ['dl'],\n  dd: ['dl'],\n  tbody: ['table'],\n  thead: ['table'],\n  tfoot: ['table'],\n  tr: ['table'],\n  td: ['table']\n\n  /*\n    Tags which do not need the closing tag\n    For example: <img> does not need </img>\n  */\n};var voidTags = exports.voidTags = ['!doctype', 'area', 'base', 'br', 'col', 'command', 'embed', 'hr', 'img', 'input', 'keygen', 'link', 'meta', 'param', 'source', 'track', 'wbr'];\n\n},{}]},{},[4])(4)\n});"],"file":"symplasm.js"}