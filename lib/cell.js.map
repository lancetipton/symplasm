{"version":3,"sources":["cell.js"],"names":["formatCell","formatAttributes","format","filterCell","mapCell","options","root","type","class","active","trim","lowerCaseTag","nodes","_options","Object","assign","rootCell","$type","$cell","attributes","cell","map","parts","attribute","key","value","formatValue","indexOf","convertAttrs","JSON","parse","e","node","parent","start","end","text","content","replace","length","$html","filter","tagName","toLowerCase","childComponents","children","$components"],"mappings":"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","file":"cell.js","sourcesContent":["import { splitHead, unquote } from './format'\n\nlet options = {\n  root: {\n    type: 'div',\n    class: 'cell-root',\n    active: true\n  },\n  trim: false,\n  lowerCaseTag: true\n}\n\nexport function formatCell (nodes, _options) {\n  Object.assign(options, _options)\n  const rootCell = {\n    $type: options.root.type,\n    class: options.root.class,\n    $cell: options.root.active\n  }\n  rootCell['$components'] = format(nodes, rootCell)\n  return rootCell\n}\n\nexport function formatAttributes (attributes, cell) {\n  attributes.map(attribute => {\n    const parts = splitHead(attribute.trim(), '=')\n    const key = parts[0]\n    const value = typeof parts[1] === 'string'\n      ? formatValue(parts[0], parts[1])\n      : null\n    cell[key] = value\n  })\n  return cell\n}\n\nfunction formatValue (key, value) {\n  if (key.indexOf('_') === 0 && options.convertAttrs) {\n    try { return JSON.parse(unquote(value)) } catch (e) {}\n  }\n  return unquote(value)\n}\n\nfunction filterCell (node, parent) {\n  let start = ''\n  let end = ''\n  let text = node.content\n  if (node.type === 'comment') {\n    start = '<!--'\n    end = '-->'\n  }\n  if (options.trim) {\n    if (node.content.trim() !== '\\n' && node.content.replace(/\\s/g, '').length > 0) {\n      text = node.content.trim()\n    } else { text = null }\n  }\n  if (text) {\n    parent.$html = parent.$html || ''\n    parent.$html += start + text + end\n  }\n  return false\n}\n\nexport function format (nodes, parent) {\n  return nodes.filter(node => {\n    if (node.type === 'text' || node.type === 'comment') {\n      return filterCell(node, parent)\n    }\n    return node\n  })\n  .map(function (node) { return mapCell(node) })\n}\n\nexport function filterCell (node, parent) {\n  let start = ''\n  let end = ''\n  let text = node.content\n  if (node.type === 'comment') {\n    start = '<!--'\n    end = '-->'\n  }\n  if (options.trim) {\n    if (node.content.trim() !== '\\n' && node.content.replace(/\\s/g, '').length > 0) {\n      text = node.content.trim()\n    } else { text = null }\n  }\n  if (text) {\n    parent.$html = parent.$html || ''\n    parent.$html += start + text + end\n  }\n  return false\n}\n\nexport function mapCell (node) {\n  let cell = {}\n  cell.$type = options.lowerCaseTag\n    ? node.tagName.toLowerCase()\n    : node.tagName\n  formatAttributes(node.attributes, cell)\n  let childComponents = format(node.children, cell)\n  if (childComponents.length > 0) {\n    cell.$components = childComponents\n  }\n  return cell\n}\n"]}