{"version":3,"sources":["stringify.js"],"names":["formatAttributes","toHTML","attributes","Object","keys","reduce","attrs","key","value","styles","map","name","quoteEscape","indexOf","quote","tree","options","node","type","content","tagName","children","isSelfClosing","voidTags","toLowerCase","join"],"mappings":";;;;;;;;QAEgBA,gB,GAAAA,gB;QAwBAC,M,GAAAA,M;;AA1BhB;;AAEO,SAASD,gBAAT,CAA2BE,UAA3B,EAAuC;AAC5C,SAAOC,OAAOC,IAAP,CAAYF,UAAZ,EAAwBG,MAAxB,CAA+B,UAACC,KAAD,EAAQC,GAAR,EAAgB;AACpD,QAAIC,QAAQN,WAAWK,GAAX,CAAZ;AACA,QAAI,CAACC,KAAL,EAAY,OAAUF,KAAV,SAAmBC,GAAnB,CAAZ,KACK,IAAGA,QAAQ,OAAR,IAAmB,QAAOC,KAAP,yCAAOA,KAAP,OAAiB,QAAvC,EAAgD;AACnD,UAAIC,SAAS,EAAb;AACAN,aAAOC,IAAP,CAAYI,KAAZ,EAAmBE,GAAnB,CAAuB,gBAAQ;AAC7BD,kBAAaE,IAAb,SAAqBH,MAAMG,IAAN,CAArB;AACD,OAFD;AAGA,UAAMC,cAAcH,OAAOI,OAAP,CAAe,IAAf,MAAyB,CAAC,CAA9C;AACA,UAAMC,QAAQF,cAAc,GAAd,GAAoB,IAAlC;AACA,aAAUN,KAAV,SAAmBC,GAAnB,SAA0BO,KAA1B,GAAkCL,MAAlC,GAA2CK,KAA3C;AACD;AACD,QAAG,OAAON,KAAP,KAAiB,SAApB,EAA+BA,aAAWA,KAAX;;AAE/B,QAAG,OAAOA,KAAP,KAAiB,QAApB,EAA6B;AAC3B,UAAMI,eAAcJ,MAAMK,OAAN,CAAc,IAAd,MAAwB,CAAC,CAA7C;AACA,UAAMC,SAAQF,eAAc,GAAd,GAAoB,IAAlC;AACA,aAAUN,KAAV,SAAmBC,GAAnB,SAA0BO,MAA1B,GAAkCN,KAAlC,GAA0CM,MAA1C;AACD;AAEF,GApBM,EAoBJ,EApBI,CAAP;AAqBD;;AAEM,SAASb,MAAT,CAAiBc,IAAjB,EAAuBC,OAAvB,EAAgC;AACrC,MAAI,OAAOD,IAAP,KAAgB,QAApB,EAA8B,OAAOA,IAAP;AAC9B,SAAOA,QAAQA,KAAKL,GAAL,CAAS,gBAAQ;AAC9B,QAAI,OAAOO,IAAP,KAAgB,QAApB,EAA8B,OAAOA,IAAP;AAC9B,QAAIA,KAAKC,IAAL,KAAc,SAAlB,EAA6B,gBAAcD,KAAKE,OAAnB;AAC7B,QAAMC,UAAUH,KAAK,CAAL,CAAhB;AACA,QAAMf,aAAae,KAAK,CAAL,CAAnB;AACA,QAAMI,WAAWJ,KAAK,CAAL,CAAjB;AACA,QAAMK,gBAAgB,2BAAcN,QAAQO,QAAtB,EAAgCH,QAAQI,WAAR,EAAhC,CAAtB;AACA,WAAOF,sBACCF,OADD,GACWpB,iBAAiBE,UAAjB,CADX,eAECkB,OAFD,GAEWpB,iBAAiBE,UAAjB,CAFX,UAE2CD,OAAOoB,QAAP,EAAiBL,OAAjB,KAA6B,EAFxE,WAEgFI,OAFhF,MAAP;AAGD,GAVc,EAUZK,IAVY,CAUP,EAVO,CAAf;AAWD;;kBAEc,EAACxB,cAAD,E","file":"stringify.js","sourcesContent":["import {arrayIncludes} from './compat'\n\nexport function formatAttributes (attributes) {\n  return Object.keys(attributes).reduce((attrs, key) => {\n    let value = attributes[key]\n    if (!value) return `${attrs} ${key}`\n    else if(key === 'style' && typeof value === 'object'){\n      let styles = ''\n      Object.keys(value).map(name => {\n        styles += `${name}:${value[name]};`\n      })\n      const quoteEscape = styles.indexOf('\\'') !== -1\n      const quote = quoteEscape ? '\"' : '\\''\n      return `${attrs} ${key}=${quote}${styles}${quote}`\n    }\n    if(typeof value === 'boolean') value = `${value}`\n    \n    if(typeof value === 'string'){\n      const quoteEscape = value.indexOf('\\'') !== -1\n      const quote = quoteEscape ? '\"' : '\\''\n      return `${attrs} ${key}=${quote}${value}${quote}`\n    }\n    \n  }, '')\n}\n\nexport function toHTML (tree, options) {\n  if (typeof tree === 'string') return tree\n  return tree && tree.map(node => {\n    if (typeof node === 'string') return node\n    if (node.type === 'comment') return `<!--${node.content}-->`\n    const tagName = node[0]\n    const attributes = node[1]\n    const children = node[2]\n    const isSelfClosing = arrayIncludes(options.voidTags, tagName.toLowerCase())\n    return isSelfClosing\n      ? `<${tagName}${formatAttributes(attributes)}>`\n      : `<${tagName}${formatAttributes(attributes)}>${toHTML(children, options) || '' }</${tagName}>`\n  }).join('')\n}\n\nexport default {toHTML}\n"]}