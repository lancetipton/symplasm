{"version":3,"sources":["stringify.js"],"names":["formatAttributes","toHTML","options","attrLowerCase","styleAsCss","attributes","attrString","Object","keys","reduce","attrs","currentKey","key","hasOpts","value","styles","map","name","_name","split","join","toLowerCase","quoteEscape","indexOf","quote","trim","length","buildTag","tagName","children","buildSelfCloseTag","formatted","tree","_options","assign","node","type","content","isSelfClosing","voidTags"],"mappings":"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","file":"stringify.js","sourcesContent":["import {arrayIncludes} from './compat'\nimport revPropMap from './rev_prop_map'\n\nlet options = {\n  attrLowerCase: false,\n  styleAsCss: false\n}\n\nexport function formatAttributes (attributes, options) {\n  let attrString = Object.keys(attributes).reduce((attrs, currentKey) => {\n    let key = currentKey\n    if(options.hasOpts && options.attrLowerCase && revPropMap[currentKey]) key = revPropMap[currentKey]\n    \n    let value = attributes[currentKey]\n    if (!value) return `${attrs} ${key}`\n    else if(key === 'style' && typeof value === 'object'){\n      let styles = ''\n      Object.keys(value).map(_name => {\n        let name = _name\n        if(options.hasOpts && options.styleAsCss) name = _name.split(/(?=[A-Z])/).join('-').toLowerCase()\n        \n        styles += `${name}:${value[_name]};`\n      })\n      const quoteEscape = styles.indexOf('\\'') !== -1\n      const quote = quoteEscape ? '\"' : '\\''\n      return `${attrs} ${key}=${quote}${styles}${quote}`\n    }\n    if(typeof value === 'boolean') value = `${value}`\n    \n    if(typeof value === 'string'){\n      const quoteEscape = value.indexOf('\\'') !== -1\n      const quote = quoteEscape ? '\"' : '\\''\n      return `${attrs} ${key}=${quote}${value}${quote}`\n    }\n    return attrs\n  }, '')\n  \n  attrString = typeof attrString === 'string' && attrString.trim() || ''\n  return attrString.length\n    ? ' '+attrString\n    : ''\n}\n\nconst buildTag = (tagName, attributes, children, options) => {\n\n  return `<${tagName}${formatAttributes(attributes, options)}>${toHTML(children, options) || '' }</${tagName}>`\n}\n\nconst buildSelfCloseTag = (tagName, attributes, options) => {\n  let formatted = formatAttributes(attributes, options)\n  formatted = formatted.length\n    ? formatted + ' '\n    : formatted\n  return `<${tagName}${formatted}${'/'}>`\n}\n\n\nexport function toHTML (tree, _options) {\n\n  options = options.hasOpts\n    ? Object.assign(options, _options)\n    : _options\n  \n  if (typeof tree === 'string') return tree\n  return tree && tree.map(node => {\n    if (typeof node === 'string') return node\n    if (node.type === 'comment') return `<!--${node.content}-->`\n    const tagName = node[0]\n    const attributes = node[1]\n    const children = node[2]\n    const isSelfClosing = arrayIncludes(options.voidTags, tagName.toLowerCase())\n    return isSelfClosing\n      ? buildSelfCloseTag(tagName, attributes, options)\n      : buildTag(tagName, attributes, children, options)\n  }).join('')\n}\n\nexport default {toHTML}\n"]}