{"version":3,"sources":["format.js"],"names":["options","root","class","tagConvert","attrKeyConvert","attrValueConvert","trim","lowerCaseTag","convertCase","converted","text_split","text","split","length","shift","map","val","charAt","toUpperCase","slice","convertStyle","valObj","val_split","styles","Array","isArray","item","indexOf","item_split","convertBlock","block","nodes","children","runAction","Object","keys","reduce","attrs","key","useKey","unquote","child","action","node","value","tagName","toLowerCase","format","childs","parent","type","filterFS","formatNode","push","formatAttributes","attributes","assign","addChildren","parts","splitKeyValue","attribute","formatValue","addChilds","concat","str","sep","idx","car","end","isQuoteStart","start","content","replace","formatFS","_options","rootFS"],"mappings":"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","file":"format.js","sourcesContent":["let options = {\n  root: {\n    0: 'div',\n    1: {\n      class: 'root-node',\n    }\n  },\n  tagConvert: {},\n  attrKeyConvert: {},\n  attrValueConvert: {},\n  trim: false,\n  lowerCaseTag: true\n}\n\n// ----------- Converters ----------- //\nconst convertCase = text => {\n  let converted = ''\n  const text_split = text.split('-')\n  if(!text_split.length) return text\n  converted += text_split.shift()\n  text_split.map(val => {\n    converted += val.charAt(0).toUpperCase() + val.slice(1)\n  })\n  return converted\n}\n\nconst convertStyle = styles => {\n  const valObj = {}\n  const val_split = styles.trim().split(';')\n  \n  Array.isArray(val_split) &&\n    val_split[0].trim() !== '' &&\n    val_split.map(item => {\n      if (item.indexOf(':') !== -1) {\n        const item_split = item.split(':')\n        if (Array.isArray(item_split) && item_split.length === 2) {\n          if (item_split[0].trim() !== '' && item_split[1].trim() !== '') {\n            valObj[convertCase(item_split[0].trim())] = item_split[1].trim()\n          }\n        }\n      }\n    })\n\n  return valObj\n}\n\nconst convertBlock = (block, nodes, children) => {\n  block[0] = options.tagConvert[block[0]]\n    ? runAction(options.tagConvert[block[0]], block, '$$DOM_NODE_NAME', block[0], nodes, children)\n    : block[0]\n\n  block[1] = typeof block[1] === 'object'\n    ? Object.keys(block[1]).reduce((attrs, key) => {\n        let useKey = options.attrKeyConvert[key]\n          ? runAction(options.attrKeyConvert[key], block, key, block[1][key], nodes, children)\n          : key\n\n        if(useKey && block[1][key]){\n          attrs[useKey] = options.attrValueConvert[key]\n            ? runAction(options.attrValueConvert[key], block, key, block[1][key], nodes, children)\n            : unquote(block[1][key])\n        }\n\n        return attrs\n      }, {})\n    : {}\n  \n  if(block[2] &&  typeof block[2] !== 'string' && block[2].length){\n    block[2] = block[2].map(child => {\n      return convertBlock(child, nodes, children)\n    })\n  }\n\n  return block\n}\n\nconst tagConvert = (action, block, node, value, nodes, children) => {\n  block[0] = options.lowerCaseTag\n    ? node.tagName.toLowerCase()\n    : node.tagName\n\n  if(typeof action === 'object' && !Array.isArray(action) && action[0]){\n    block[0] = action[0]\n    block[1] = action[1] || {}\n    if(action[2]) block[2] = action[2]\n    block = convertBlock(block, nodes, children)\n  }\n  else block[0] = runAction(action, node, '$$DOM_NODE_NAME', value, nodes, children)\n\n  return block\n}\n\n// ----------- Run options methods ----------- //\nconst runAction = (action, node, key, value, nodes, children) => {\n  return typeof action === 'function'\n    ? action(node, key, value, nodes, children, options)\n    : action\n}\n\n// ----------- Formatters ----------- //\nconst format = (childs, parent, nodes, children) => {\n  return childs\n    ? childs.reduce((children, node) => {\n        nodes = nodes || childs\n        const child = node.type === 'text' || node.type === 'comment'\n          ? filterFS(node, parent)\n          : formatNode(node, childs, nodes, children)\n        child && children.push(child)\n        return children\n      }, [])\n    : []\n}\n\nconst formatNode = (node, nodes, children) => {\n\n  const block = options.tagConvert[node.tagName]\n    ? tagConvert(options.tagConvert[node.tagName], {}, node, node.tagName, nodes, children)\n    : { 0: node.tagName }\n  \n  const attrs = formatAttributes(node, node.attributes, nodes, children)\n  block[1] = Object.assign({}, attrs, block[1])\n\n  const childs = format(node.children, block, nodes, children)\n  return addChildren(block, childs)\n}\n\nconst formatAttributes = (node, attributes, nodes, children) => {\n  const attrs = {}\n  \n  attributes && attributes.map(attribute => {\n    const parts = splitKeyValue(attribute.trim(), '=')\n    const key = options.attrKeyConvert && options.attrKeyConvert[parts[0]]\n      ? runAction(options.attrKeyConvert[parts[0]], node, key, parts[1], nodes, children)\n      : parts[0]\n\n    const value = typeof parts[1] === 'string'\n      ? formatValue(node, parts[0], parts[1], nodes, children)\n      : null\n    if(key && value) attrs[key] = value\n  })\n  return attrs\n}\n\nconst formatValue = (node, key, value, nodes, children) => {\n  return key === 'style' && typeof value === 'string'\n    ? convertStyle(unquote(value))\n    : options.attrValueConvert[key]\n      ? runAction(options.attrValueConvert[key], node, key, unquote(value), nodes, children)\n      : unquote(value)\n}\n\n// ----------- Helpers ----------- //\nconst addChildren = (block, childs) => {\n  const addChilds = childs.length === 1 && typeof childs[0] === 'string'\n    ? childs[0]\n    : childs.length && childs || null\n\n  if(addChilds) {\n    if(!block[2]) block[2] = addChilds\n    else if(Array.isArray(block[2])) block[2] = block[2].concat(addChilds)\n    else block[2] = [block[2]].concat(addChilds)\n  }\n  return block\n}\n\nconst splitKeyValue = (str, sep) => {\n  const idx = str.indexOf(sep)\n  if (idx === -1) return [str]\n  return [str.slice(0, idx), str.slice(idx + sep.length)]\n}\n\nconst unquote = str => {\n  const car = str.charAt(0)\n  const end = str.length - 1\n  const isQuoteStart = car === '\"' || car === \"'\"\n  if (isQuoteStart && car === str.charAt(end)) {\n    return str.slice(1, end)\n  }\n  return str\n}\n\nconst filterFS = (node) => {\n  let start = ''\n  let end = ''\n  let text = node.content\n  if (node.type === 'comment') {\n    start = '<!--'\n    end = '-->'\n  }\n  if (options.trim) {\n    return node.content.trim() !== '\\n' && node.content.replace(/\\s/g, '').length > 0\n      ? start + node.content.trim() + end\n      : null\n  }\n  return text\n    ? start + text + end\n    : null\n}\n\nexport const formatFS = (nodes, _options) => {\n  Object.assign(options, _options)\n  const rootFS = convertBlock(Object.assign({}, options.root), nodes)\n  const children = format(nodes, rootFS)\n\n  return addChildren(rootFS, children)\n}"]}