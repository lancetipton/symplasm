{"version":3,"sources":["format.js"],"names":["options","root","class","tagConvert","attrKeyConvert","attrValueConvert","attrKeyAdd","trim","lowerCaseTag","selectorCheck","attrArrEmpty","convertCase","converted","text_split","text","split","length","shift","map","val","charAt","toUpperCase","slice","convertStyle","valObj","val_split","styles","Array","isArray","item","indexOf","item_split","convertBlock","block","nodes","children","runAction","action","node","key","value","Object","keys","reduce","attrs","useKey","unquote","child","buildBlock","org","added","assign","args","tagName","toLowerCase","data","def","tagType","updateValue","selector","actionValue","format","parent","childs","type","filterFS","formatNode","push","formatAttributes","attributes","addChildren","parts","splitKeyValue","formatValue","addAttribute","getSelector","checkSelector","checkArgs","addChilds","concat","str","sep","idx","car","end","isQuoteStart","start","content","replace","setupSelectors","selectorArr","selectTypes","attribute","attr","isArr","select","tags","allTags","props","el","hasSelectors","tag","formatFS","_options","rootFS","console","log"],"mappings":"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","file":"format.js","sourcesContent":["let options = {\n  root: {\n    0: 'div',\n    1: {\n      class: 'root-node',\n    }\n  },\n  tagConvert: {},\n  attrKeyConvert: {},\n  attrValueConvert: {},\n  attrKeyAdd: {},\n  trim: false,\n  lowerCaseTag: true\n}\n\nlet selectorCheck = {\n  tagConvert: {},\n  attrKeyConvert: {},\n  attrValueConvert: {},\n  attrKeyAdd: {},\n}\nlet attrArrEmpty = true\n\n// ----------- Converters ----------- //\nconst convertCase = text => {\n  let converted = ''\n  const text_split = text.split('-')\n  if(!text_split.length) return text\n  converted += text_split.shift()\n  text_split.map(val => {\n    converted += val.charAt(0).toUpperCase() + val.slice(1)\n  })\n  return converted\n}\n\nconst convertStyle = styles => {\n  const valObj = {}\n  const val_split = styles.trim().split(';')\n  \n  Array.isArray(val_split) &&\n    val_split[0].trim() !== '' &&\n    val_split.map(item => {\n      if (item.indexOf(':') !== -1) {\n        const item_split = item.split(':')\n        if (Array.isArray(item_split) && item_split.length === 2) {\n          if (item_split[0].trim() !== '' && item_split[1].trim() !== '') {\n            valObj[convertCase(item_split[0].trim())] = item_split[1].trim()\n          }\n        }\n      }\n    })\n\n  return valObj\n}\n\nconst convertBlock = (block, nodes, children) => {\n  block[0] = options.tagConvert[block[0]]\n    ? runAction({\n        action: options.tagConvert[block[0]],\n        node: block,\n        key: '$$DOM_TAG_NAME',\n        value: block[0],\n        nodes,\n        children\n      }, 'value')\n    : block[0]\n\n  block[1] = typeof block[1] === 'object'\n    ? Object.keys(block[1]).reduce((attrs, key) => {\n        let useKey = options.attrKeyConvert[key]\n          ? runAction({\n              action: options.attrKeyConvert[key],\n              node: block,\n              value: block[1][key],\n              key,\n              nodes,\n              children\n            }, 'key')\n          : key\n\n        if(useKey && block[1][key]){\n          attrs[useKey] = options.attrValueConvert[key]\n            ? runAction({\n                action: options.attrValueConvert[key],\n                node: block,\n                value: block[1][key],\n                key,\n                nodes,\n                children\n              }, 'value')\n            : unquote(block[1][key])\n        }\n\n        return attrs\n      }, {})\n    : {}\n  \n  if(block[2] &&  typeof block[2] !== 'string' && block[2].length){\n    block[2] = block[2].map(child => {\n      return convertBlock(child, nodes, children)\n    })\n  }\n\n  return block\n}\n\nconst buildBlock = (org, added, nodes, children) => {\n  org[0] = added[0]\n  org[1] = Object.assign({}, org[1], added[1])\n  if(added[2]) org[2] = added[2]\n  return convertBlock(org, nodes, children)\n}\n\nconst tagConvert = (args) => {\n  const { action, node, value, nodes, children } = args\n  let { block } = args\n  \n  const tagName = node.tagName || node[0]\n  if(!tagName) return block\n  block[0] = options.lowerCaseTag\n    ? tagName.toLowerCase()\n    : tagName\n\n  if(typeof action === 'function'){\n    let data = runAction({\n      key: '$$DOM_TAG_NAME',\n      value: block[0],\n      action,\n      node,\n      nodes,\n      children\n    }, 'value')\n    if(!data) return block\n    if(typeof data === 'string') data = { 0: data }\n    \n    if(typeof data === 'object')\n      return buildBlock(block, data, nodes, children)\n  }\n  else if(typeof action === 'object' && !Array.isArray(action) && action[0]){\n    return buildBlock(block, action, nodes, children)\n  }\n  else block[0] = runAction({\n    key: '$$DOM_TAG_NAME',\n    value: block[0],\n    action,\n    node,\n    nodes,\n    children\n  }, 'value')\n\n  return block\n}\n\n// ----------- Run options methods ----------- //\nconst runAction = (args, def) => {\n  const { action, node, key, value, nodes, children } = args\n  \n  switch(typeof action){\n    case 'function':\n      return action(node, key, value, nodes, children, options) || action\n    case 'object':\n      const tagType = node.tagName || node[0]\n      let updateValue = !action.selector\n      // Run default actions if no selector specified\n      if(typeof action.selector === 'object'){\n        if(Array.isArray(action.selector) && action.selector.indexOf(tagType) !== -1){\n          \n        }\n        \n        Object.keys(action.selector).map(key => {\n          const actionValue = action.selector[key]\n          if(typeof actionValue === 'string'){\n            \n          }\n          if(typeof actionValue === 'object'){\n            \n          }\n        })\n      }\n      if(updateValue){\n        if(!tagType || !action.value) return value\n        if(typeof action.value === 'string') return action.value\n        if(typeof action.value === 'function')\n          return action.value(node, key, value, nodes, children, options)\n      }\n      \n      \n      return args[def]\n    default:\n      return action\n  }\n}\n\n// ----------- Formatters ----------- //\nconst format = (args) => {\n  const { parent, children } = args\n  let { childs, nodes, } = args\n\n  return childs\n    ? childs.reduce((children, node) => {\n        nodes = nodes || childs\n        const child = node.type === 'text' || node.type === 'comment'\n          ? filterFS(node, parent)\n          : formatNode(node, childs, nodes, children)\n        child && children.push(child)\n        return children\n      }, [])\n    : []\n}\n\nconst formatNode = (node, nodes, children) => {\n\n  const block = options.tagConvert[node.tagName]\n    ? tagConvert({\n        action: options.tagConvert[node.tagName],\n        block: {},\n        value: node.tagName,\n        node,\n        nodes,\n        children\n      })\n    : { 0: node.tagName }\n  \n  const attrs = formatAttributes({\n    attributes: node.attributes,\n    node,\n    nodes,\n    children\n  })\n  block[1] = Object.assign({}, block[1], attrs)\n\n  const childs = format({\n    childs: node.children,\n    parent: block,\n    nodes,\n    children\n  })\n  return addChildren(block, childs)\n}\n\nconst formatAttributes = (args) => {\n  const { node, attributes, nodes, children } = args\n  const attrs = {}\n\n  const isArray = Array.isArray(attributes)\n  Object.keys(attributes).map(item => {\n    const parts = isArray\n      ? splitKeyValue(attributes[item].trim(), '=')\n      : [ item, attributes[item]]\n\n    const key = options.attrKeyConvert && options.attrKeyConvert[parts[0]]\n      ? runAction({\n        action: options.attrKeyConvert[parts[0]],\n        key: parts[0],\n        value: parts[1],\n        node,\n        nodes,\n        children\n      }, 'key')\n      : parts[0]\n  \n    const value = typeof parts[1] === 'string'\n      ? formatValue({\n          key: parts[0],\n          value: parts[1],\n          node,\n          nodes,\n          children\n        })\n      : null\n    if(key && value) attrs[key] = value\n  })\n  \n  \n  if(attrArrEmpty) return attrs\n  \n  return addAttribute({\n    node,\n    attrs,\n    nodes,\n    children\n  })\n  \n}\n\nconst formatValue = (args) => {\n  const { node, key, value, nodes, children } = args\n  return key === 'style' && typeof value === 'string'\n    ? convertStyle(unquote(value))\n    : options.attrValueConvert[key]\n      ? runAction({\n          action: options.attrValueConvert[key],\n          value: unquote(value),\n          node,\n          key,\n          nodes,\n          children\n        }, 'value')\n      : unquote(value)\n}\n\n// ----------- Helpers ----------- //\nconst getSelector = (node, selector) => {\n\n}\n\nconst checkSelector = (args) => {\n  const { action, node, key, value, nodes, children } = args\n  const tagType = node.tagName || node[0]\n  \n  if(action.selector){\n    \n  }\n  // runAction\n  // action, node, key, value, nodes, children\n  // action.selector && action.selector.indexOf(tagType) === -1\n  \n  // addAttribute\n  // node, attrs, nodes, children\n  // !action.selector || action.selector.indexOf(node.tagName) !== -1\n}\n\nconst addAttribute = (args) => {\n  const { node, attrs, nodes, children } = args\n  \n  Object.keys(options.attrKeyAdd).map(key => {\n    const action = options.attrKeyAdd[key]\n    let value\n    if(typeof action === 'object'){\n      if(!action.value) return\n      const checkArgs = Object.assign({}, args, { action, key })\n      \n      if(checkSelector(checkArgs)){\n        value = typeof action.value === 'function'\n          ? action.value(\n              node,\n              key,\n              action.value,\n              nodes,\n              children,\n              options,\n            )\n          : action.value\n      }\n    }\n    else {\n      value = runAction({\n        action: options.attrKeyAdd[key],\n        value: action.value,\n        node,\n        key,\n        nodes,\n        children\n      })\n    }\n    if(value) attrs[key] = value\n  })\n\n  return attrs\n}\n\nconst addChildren = (block, childs) => {\n  const addChilds = childs.length === 1 && typeof childs[0] === 'string'\n    ? childs[0]\n    : childs.length && childs || null\n\n  if(addChilds) {\n    if(!block[2]) block[2] = addChilds\n    else if(Array.isArray(block[2])) block[2] = block[2].concat(addChilds)\n    else block[2] = [block[2]].concat(addChilds)\n  }\n  return block\n}\n\nconst splitKeyValue = (str, sep) => {\n  const idx = str.indexOf(sep)\n  if (idx === -1) return [str]\n  return [str.slice(0, idx), str.slice(idx + sep.length)]\n}\n\nconst unquote = str => {\n  const car = str.charAt(0)\n  const end = str.length - 1\n  const isQuoteStart = car === '\"' || car === \"'\"\n  if (isQuoteStart && car === str.charAt(end)) {\n    return str.slice(1, end)\n  }\n  return str\n}\n\nconst filterFS = (node) => {\n  let start = ''\n  let end = ''\n  let text = node.content\n  if (node.type === 'comment') {\n    start = '<!--'\n    end = '-->'\n  }\n  if (options.trim) {\n    return node.content.trim() !== '\\n' && node.content.replace(/\\s/g, '').length > 0\n      ? start + node.content.trim() + end\n      : null\n  }\n  return text\n    ? start + text + end\n    : null\n}\n\nconst setupSelectors = () => {\n  const selectorArr = ['tagConvert', 'attrKeyConvert', 'attrValueConvert', 'attrKeyAdd']\n  const selectTypes = [[ 'class', '.'], [ 'id', '#'], [ 'data', '[']]\n\n  Object.keys(options).map(key => {\n    if(selectorArr.indexOf(key) === -1) return\n    \n    Object.keys(options[key]).map(attr => {\n      // Get the attribute to be checked - i.e. class / id / name\n      const attribute = options[key][attr]\n      // No selector, just return\n      if(!attribute.selector) return\n      selectorCheck[key][attr] = selectorCheck[key][attr] || {}\n      // chache selector type\n      const isArr = Array.isArray(attribute.selector)\n      // check that is has a value to return\n      if(isArr){\n        if(!options[key][attr].value) return  \n        selectorCheck[key][attr].value = options[key][attr].value\n      }\n      else if(!attribute.selector[select].value) return\n      \n      Object.keys(attribute.selector).map(select => {\n        // Selector tags - i.e. input.class / button#primary / select[td-select]\n        const tags = isArr && attribute.selector[select] || select\n        // split all tags if more then 1\n        const allTags = tags.split(',')\n        // loop tags and split on selector type - i.e. class / id / name\n        allTags.map(tag => {\n          const props = {}\n          let el\n          const hasSelectors = []\n          // Loop selector types and add to select checker\n          selectTypes.map(type => {\n            if(tag.indexOf(type[1]) !== -1){\n              const split = tag.split(type[1])\n              props[type[0]] = split[1].replace(']', '')\n              el = split[0]\n              hasSelectors.push(true)\n            }\n          })\n          if(hasSelectors.indexOf(true) !== -1){\n            selectorCheck[key][attr][el] = props\n            if(!isArr) selectorCheck[key][attr][el].value = attribute.selector[select].value\n          }\n          else {\n            selectorCheck[key][attr][tag] = '*'\n            if(!isArr) selectorCheck[key][attr][tag].value = attribute.selector[select].value\n          }\n        })\n      })\n\n    })\n  })\n}\n\nexport const formatFS = (nodes, _options) => {\n  let rootFS = Object.assign({}, options.root, _options.root)\n  Object.assign(options, _options)\n  setupSelectors(options)\n  \n  console.log(selectorCheck);\n  \n  attrArrEmpty = Object.keys(options.attrKeyAdd).length === 0\n  if(options.tagConvert[rootFS[0]]){\n    rootFS = tagConvert({\n      action: options.tagConvert[rootFS[0]],\n      block: rootFS,\n      value: rootFS[0],\n      node: rootFS,\n      children: nodes,\n      nodes,\n    })\n  }\n  rootFS[1] = formatAttributes({\n    attributes: rootFS[1],\n    node: rootFS,\n    children: nodes,\n    nodes\n  })\n  return addChildren(rootFS, format({\n    childs: nodes,\n    parent: rootFS,\n  }))\n}"]}