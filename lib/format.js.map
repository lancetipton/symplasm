{"version":3,"sources":["format.js"],"names":["options","root","tagConvert","attrKeyConvert","attrValueConvert","attrKeyAdd","trim","lowerCaseTag","selectorCheck","attrArrEmpty","convertBlock","block","nodes","children","runAction","action","node","key","value","Object","keys","reduce","attrs","useKey","length","map","child","buildBlock","org","added","assign","args","tagName","toLowerCase","data","Array","isArray","format","parent","childs","type","filterFS","formatNode","push","formatAttributes","attributes","parts","item","formatValue","addAttribute","def","shouldUpdateValue","tagType","nodeAttrs","attsIsArr","selector","updateVal","all","toCheck","indexOf","isValid","attr","split","start","end","text","content","replace","formatFS","_options","rootFS"],"mappings":"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","file":"format.js","sourcesContent":["import {\n  addChildren,\n  convertStyle,\n  setupSelectors,\n  splitKeyValue,\n  unquote\n} from './helpers'\n\nlet options = {\n  root: {\n    0: 'div',\n  },\n  tagConvert: {},\n  attrKeyConvert: {},\n  attrValueConvert: {},\n  attrKeyAdd: {},\n  trim: false,\n  lowerCaseTag: true\n}\n\nlet selectorCheck = {\n  tagConvert: {},\n  attrKeyConvert: {},\n  attrValueConvert: {},\n  attrKeyAdd: {},\n}\nlet attrArrEmpty = true\n\n\nconst convertBlock = (block, nodes, children) => {\n\n  block[0] = selectorCheck.tagConvert[block[0]]\n    ? runAction({\n        action: selectorCheck.tagConvert[block[0]],\n        node: block,\n        key: '$$DOM_TAG_NAME',\n        value: block[0],\n        nodes,\n        children\n      }, 'value')\n    : block[0]\n  \n\n  block[1] = typeof block[1] === 'object'\n    ? Object.keys(block[1]).reduce((attrs, key) => {\n        let useKey = selectorCheck.attrKeyConvert[key]\n          ? runAction({\n              action: selectorCheck.attrKeyConvert[key],\n              node: block,\n              value: block[1][key],\n              key,\n              nodes,\n              children\n            }, 'key')\n          : key\n\n\n        if(useKey && block[1][key]){\n          attrs[useKey] = selectorCheck.attrValueConvert[key]\n            ? runAction({\n                action: selectorCheck.attrValueConvert[key],\n                node: block,\n                value: block[1][key],\n                key,\n                nodes,\n                children\n              }, 'value')\n            : unquote(block[1][key])\n        }\n\n        return attrs\n      }, {})\n    : {}\n\n  if(block[2] &&  typeof block[2] !== 'string' && block[2].length){\n    block[2] = block[2].map(child => {\n      return convertBlock(child, nodes, children)\n    })\n  }\n\n  return block\n}\n\nconst buildBlock = (org, added, nodes, children) => {\n  org[0] = added[0]\n  org[1] = Object.assign({}, org[1], added[1])\n  if(added[2]) org[2] = added[2]\n  return convertBlock(org, nodes, children)\n}\n\nconst tagConvert = (args) => {\n  const { action, node, value, nodes, children } = args\n  let { block } = args\n\n  const tagName = node.tagName || node[0]\n  if(!tagName) return block\n  block[0] = options.lowerCaseTag\n    ? tagName.toLowerCase()\n    : tagName\n\n  if(typeof action === 'function'){\n    let data = runAction({\n      key: '$$DOM_TAG_NAME',\n      value: block[0],\n      action,\n      node,\n      nodes,\n      children\n    }, 'value')\n    if(!data) return block\n    if(typeof data === 'string') data = { 0: data }\n    \n    if(typeof data === 'object')\n      return buildBlock(block, data, nodes, children)\n  }\n  else if(typeof action === 'object' && !Array.isArray(action) && action[0]){\n    return buildBlock(block, action, nodes, children)\n  }\n  else {\n    const data = runAction({\n      key: '$$DOM_TAG_NAME',\n      value: block[0],\n      action,\n      node,\n      nodes,\n      children\n    }, 'value')\n    if(typeof data === 'string') block[0] = data\n    if(typeof data === 'object'){\n      block = buildBlock(block, data, nodes, children)\n    }\n  }\n  \n  \n  return block\n}\n\n// ----------- Formatters ----------- //\nconst format = (args) => {\n  const { parent, children } = args\n  let { childs, nodes, } = args\n\n  return childs\n    ? childs.reduce((children, node) => {\n        nodes = nodes || childs\n        const child = node.type === 'text' || node.type === 'comment'\n          ? filterFS(node, parent)\n          : formatNode(node, childs, nodes, children)\n        child && children.push(child)\n        return children\n      }, [])\n    : []\n}\n\nconst formatNode = (node, nodes, children) => {\n  const block = selectorCheck.tagConvert[node.tagName]\n    ? tagConvert({\n        action: selectorCheck.tagConvert[node.tagName],\n        block: {},\n        value: node.tagName,\n        node,\n        nodes,\n        children\n      })\n    : { 0: node.tagName }\n\n  // Build any of the current attrs\n  const attrs = formatAttributes({\n    attributes: node.attributes,\n    node,\n    nodes,\n    children\n  })\n\n  // current attr data get merge after the data from the node\n  // This is because the only way the block will have attrs is if it was tagConverted\n  block[1] = Object.assign({}, attrs, block[1])\n\n  const childs = format({\n    childs: node.children,\n    parent: block,\n    nodes,\n    children\n  })\n  return addChildren(block, childs)\n}\n\nconst formatAttributes = (args) => {\n  const { node, nodes, children } = args\n  let { attributes } = args\n  attributes = attributes || {}\n  const attrs = {}\n\n  const isArray = Array.isArray(attributes)\n  Object.keys(attributes).map(item => {\n    const parts = isArray\n      ? splitKeyValue(attributes[item].trim(), '=')\n      : [ item, attributes[item]]\n\n    const key = selectorCheck.attrKeyConvert[parts[0]]\n      ? runAction({\n          action: selectorCheck.attrKeyConvert[parts[0]],\n          key: parts[0],\n          value: parts[1],\n          node,\n          nodes,\n          children\n        }, 'key')\n      : parts[0]\n  \n    const value = typeof parts[1] === 'string'\n      ? formatValue({\n          key: parts[0],\n          value: parts[1],\n          node,\n          nodes,\n          children\n        })\n      : null\n    if(key) attrs[key] = value || 'true'\n  })\n  \n  if(attrArrEmpty) return attrs\n  \n  return addAttribute({\n    node,\n    attrs,\n    nodes,\n    children\n  })\n  \n}\n\nconst formatValue = (args) => {\n  const { node, key, value, nodes, children } = args\n  return key === 'style' && typeof value === 'string'\n    ? convertStyle(unquote(value))\n    : selectorCheck.attrValueConvert[key]\n      ? runAction({\n          action: selectorCheck.attrValueConvert[key],\n          value: unquote(value),\n          node,\n          key,\n          nodes,\n          children\n        }, 'value')\n      : unquote(value)\n}\n\n// ----------- Run options methods ----------- //\nconst runAction = (args, def) => {\n  const { action, node, key, value, nodes, children } = args\n  \n  switch(typeof action){\n    case 'string':\n      return action || args[def]\n    case 'function':\n      \n    \n      return action({\n        0: node.tagName || node[0],\n        1: node.attributes || node[1],\n        2: children || node[2]\n      }, key, value, nodes, children, options) || args[def]\n    case 'object':\n      let shouldUpdateValue = false\n      // Get the tag type to be checked\n      const tagType = node.tagName || node[0]\n       if(!tagType) return args[def]\n      \n      // Get the node attrs if there are any\n      const nodeAttrs = node.attributes || node[1]\n      const attsIsArr = Array.isArray(nodeAttrs)\n\n      // Get the selector to check\n      const selector = action[tagType]\n      // if none, return the default\n      if(!selector) return args[def]\n      \n      \n      // Get the update value\n      const updateVal = selector.value || action.value\n\n      // if none, return the default\n      if(!updateVal) return args[def]\n\n      // Check if it's an all selector, if it is, set the value\n      if(selector.all) shouldUpdateValue = true\n      else {\n        // return the default if it's not a select all and no attrs exist\n        if(!nodeAttrs) return args[def]\n        \n        // Loop the slector and check if any of the elements attrs match\n        Object.keys(selector).map(key => {\n          // If the updateVaule is already set, stop checking\n          if(shouldUpdateValue) return\n          \n          let toCheck = `${key}=\"${selector[key]}\"`\n          if(attsIsArr){\n            shouldUpdateValue = key !== 'data'\n              ? nodeAttrs.indexOf(toCheck) !== -1\n              : nodeAttrs.reduce((isValid, attr) => {\n                  return isValid || ( selector[key].indexOf('=') !== -1\n                    ? selector[key] === attr\n                    : selector[key] === attr.split('=')[0]\n                  )\n                }, false)\n          }\n          else {\n            let useKey = key\n            if(key === 'data') useKey = selector[key].split('=')[0]\n            // if nodeAttrs is an object, and the key does not exsits, then return\n            if(!nodeAttrs[useKey]) return\n            shouldUpdateValue = selector[key].indexOf('=') !== -1\n              // If select as = we are looking for more specific, so\n              // build key from nodeAttrs and test it\n              ? `${useKey}=\"${nodeAttrs[useKey]}\"` === selector[key]\n              // Otherwise return true, because we know the nodeAttrs has the key\n              : true\n          }\n        })\n      }\n      \n      if(shouldUpdateValue){\n        // If we should update, set the update based on type\n        if(typeof updateVal === 'string' || typeof updateVal === 'object') return updateVal\n        else if(typeof updateVal === 'function'){\n          return updateVal({\n            0: node.tagName || node[0],\n            1: node.attributes || node[1],\n            2: children || node[2]\n          }, key, value, nodes, children, options) || args[def]\n        }\n      }\n      // If we should not update the elment, return the default\n      return args[def]\n\n    default:\n      return action || args[def]\n  }\n}\n\n// ----------- Helpers ----------- //\nconst addAttribute = (args) => {\n  const { node, attrs, nodes, children } = args\n  \n  Object.keys(selectorCheck.attrKeyAdd).map(key => {\n    const value = runAction({\n      action: selectorCheck.attrKeyAdd[key],\n      key,\n      node,\n      nodes,\n      children\n    })\n\n    if(value) attrs[key] = value\n  })\n\n  return attrs\n}\n\n\nconst filterFS = (node) => {\n  let start = ''\n  let end = ''\n  let text = node.content\n  if (node.type === 'comment') {\n    start = '<!--'\n    end = '-->'\n  }\n  if (options.trim) {\n    return node.content.trim() !== '\\n' && node.content.replace(/\\s/g, '').length > 0\n      ? start + node.content.trim() + end\n      : null\n  }\n  return text\n    ? start + text + end\n    : null\n}\n\nexport const formatFS = (nodes, _options) => {\n  let rootFS = Object.assign({}, options.root, _options.root)\n  Object.assign(options, _options)\n  selectorCheck = setupSelectors(selectorCheck, options)\n  attrArrEmpty = Object.keys(options.attrKeyAdd).length === 0\n  \n  if(selectorCheck.tagConvert[rootFS[0]]){\n    rootFS = tagConvert({\n      action: selectorCheck.tagConvert[rootFS[0]],\n      block: rootFS,\n      value: rootFS[0],\n      node: rootFS,\n      children: nodes,\n      nodes,\n    })\n  }\n  rootFS[1] = formatAttributes({\n    attributes: rootFS[1],\n    node: rootFS,\n    children: nodes,\n    nodes\n  })\n\n  rootFS[2] = Array.isArray(rootFS[2])\n  ? rootFS[2].map(child => {\n      return convertBlock(child, nodes, nodes)\n    })\n  : []\n\n\n  return addChildren(rootFS, format({\n    childs: nodes,\n    parent: rootFS,\n  }))\n}"]}